// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: opencensus/proto/stats/v1/stats.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Opencensus.Proto.Stats.V1 {

  /// <summary>Holder for reflection information generated from opencensus/proto/stats/v1/stats.proto</summary>
  public static partial class StatsReflection {

    #region Descriptor
    /// <summary>File descriptor for opencensus/proto/stats/v1/stats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVvcGVuY2Vuc3VzL3Byb3RvL3N0YXRzL3YxL3N0YXRzLnByb3RvEhlvcGVu",
            "Y2Vuc3VzLnByb3RvLnN0YXRzLnYxGh9nb29nbGUvcHJvdG9idWYvdGltZXN0",
            "YW1wLnByb3RvIiEKA1RhZxILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAki",
            "pgEKB01lYXN1cmUSDAoEbmFtZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEo",
            "CRIMCgR1bml0GAMgASgJEjUKBHR5cGUYBCABKA4yJy5vcGVuY2Vuc3VzLnBy",
            "b3RvLnN0YXRzLnYxLk1lYXN1cmUuVHlwZSIzCgRUeXBlEhQKEFRZUEVfVU5T",
            "UEVDSUZJRUQQABIJCgVJTlQ2NBABEgoKBkRPVUJMRRACIrkDCgRWaWV3EgwK",
            "BG5hbWUYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSMwoHbWVhc3VyZRgD",
            "IAEoCzIiLm9wZW5jZW5zdXMucHJvdG8uc3RhdHMudjEuTWVhc3VyZRIPCgdj",
            "b2x1bW5zGAQgAygJEkgKEWNvdW50X2FnZ3JlZ2F0aW9uGAUgASgLMisub3Bl",
            "bmNlbnN1cy5wcm90by5zdGF0cy52MS5Db3VudEFnZ3JlZ2F0aW9uSAASRAoP",
            "c3VtX2FnZ3JlZ2F0aW9uGAYgASgLMikub3BlbmNlbnN1cy5wcm90by5zdGF0",
            "cy52MS5TdW1BZ2dyZWdhdGlvbkgAElEKFmxhc3RfdmFsdWVfYWdncmVnYXRp",
            "b24YByABKAsyLy5vcGVuY2Vuc3VzLnByb3RvLnN0YXRzLnYxLkxhc3RWYWx1",
            "ZUFnZ3JlZ2F0aW9uSAASVgoYZGlzdHJpYnV0aW9uX2FnZ3JlZ2F0aW9uGAgg",
            "ASgLMjIub3BlbmNlbnN1cy5wcm90by5zdGF0cy52MS5EaXN0cmlidXRpb25B",
            "Z2dyZWdhdGlvbkgAQg0KC2FnZ3JlZ2F0aW9uIhIKEENvdW50QWdncmVnYXRp",
            "b24iEAoOU3VtQWdncmVnYXRpb24iFgoUTGFzdFZhbHVlQWdncmVnYXRpb24i",
            "MAoXRGlzdHJpYnV0aW9uQWdncmVnYXRpb24SFQoNYnVja2V0X2JvdW5kcxgB",
            "IAMoASKxAQoLTWVhc3VyZW1lbnQSLAoEdGFncxgBIAMoCzIeLm9wZW5jZW5z",
            "dXMucHJvdG8uc3RhdHMudjEuVGFnEhQKDG1lYXN1cmVfbmFtZRgCIAEoCRIW",
            "Cgxkb3VibGVfdmFsdWUYAyABKAFIABITCglpbnRfdmFsdWUYBCABKANIABIo",
            "CgR0aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIHCgV2",
            "YWx1ZUJwChxpby5vcGVuY2Vuc3VzLnByb3RvLnN0YXRzLnYxQgpTdGF0c1By",
            "b3RvUAFaQmdpdGh1Yi5jb20vY2Vuc3VzLWluc3RydW1lbnRhdGlvbi9vcGVu",
            "Y2Vuc3VzLXByb3RvL2dlbi1nby9zdGF0cy92MWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.Tag), global::Opencensus.Proto.Stats.V1.Tag.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.Measure), global::Opencensus.Proto.Stats.V1.Measure.Parser, new[]{ "Name", "Description", "Unit", "Type" }, null, new[]{ typeof(global::Opencensus.Proto.Stats.V1.Measure.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.View), global::Opencensus.Proto.Stats.V1.View.Parser, new[]{ "Name", "Description", "Measure", "Columns", "CountAggregation", "SumAggregation", "LastValueAggregation", "DistributionAggregation" }, new[]{ "Aggregation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.CountAggregation), global::Opencensus.Proto.Stats.V1.CountAggregation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.SumAggregation), global::Opencensus.Proto.Stats.V1.SumAggregation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.LastValueAggregation), global::Opencensus.Proto.Stats.V1.LastValueAggregation.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.DistributionAggregation), global::Opencensus.Proto.Stats.V1.DistributionAggregation.Parser, new[]{ "BucketBounds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.V1.Measurement), global::Opencensus.Proto.Stats.V1.Measurement.Parser, new[]{ "Tags", "MeasureName", "DoubleValue", "IntValue", "Time" }, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// TODO(bdrutu): Consider if this should be moved to a "tags" directory to match the API structure.
  /// </summary>
  public sealed partial class Tag : pb::IMessage<Tag> {
    private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag(Tag other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag Clone() {
      return new Tag(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tag other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Measure .
  /// </summary>
  public sealed partial class Measure : pb::IMessage<Measure> {
    private static readonly pb::MessageParser<Measure> _parser = new pb::MessageParser<Measure>(() => new Measure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Measure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measure(Measure other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      unit_ = other.unit_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measure Clone() {
      return new Measure(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A string by which the measure will be referred to, e.g. "rpc_server_latency". Names MUST be
    /// unique within the library.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Describes the measure, e.g. "RPC latency in seconds".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 3;
    private string unit_ = "";
    /// <summary>
    /// Describes the unit used for the Measure. Follows the format described by
    /// http://unitsofmeasure.org/ucum.html.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Opencensus.Proto.Stats.V1.Measure.Types.Type type_ = global::Opencensus.Proto.Stats.V1.Measure.Types.Type.Unspecified;
    /// <summary>
    /// The type used for this Measure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.V1.Measure.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Measure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Measure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Unit != other.Unit) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Type != global::Opencensus.Proto.Stats.V1.Measure.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Unit);
      }
      if (Type != global::Opencensus.Proto.Stats.V1.Measure.Types.Type.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Type != global::Opencensus.Proto.Stats.V1.Measure.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Measure other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Type != global::Opencensus.Proto.Stats.V1.Measure.Types.Type.Unspecified) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Unit = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Opencensus.Proto.Stats.V1.Measure.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Measure message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// Unknown type.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Indicates an int64 Measure.
        /// </summary>
        [pbr::OriginalName("INT64")] Int64 = 1,
        /// <summary>
        /// Indicates a double Measure.
        /// </summary>
        [pbr::OriginalName("DOUBLE")] Double = 2,
      }

    }
    #endregion

  }

  public sealed partial class View : pb::IMessage<View> {
    private static readonly pb::MessageParser<View> _parser = new pb::MessageParser<View>(() => new View());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<View> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View(View other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      measure_ = other.measure_ != null ? other.measure_.Clone() : null;
      columns_ = other.columns_.Clone();
      switch (other.AggregationCase) {
        case AggregationOneofCase.CountAggregation:
          CountAggregation = other.CountAggregation.Clone();
          break;
        case AggregationOneofCase.SumAggregation:
          SumAggregation = other.SumAggregation.Clone();
          break;
        case AggregationOneofCase.LastValueAggregation:
          LastValueAggregation = other.LastValueAggregation.Clone();
          break;
        case AggregationOneofCase.DistributionAggregation:
          DistributionAggregation = other.DistributionAggregation.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View Clone() {
      return new View(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
    /// within the library.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Describes the view, e.g. "RPC latency distribution"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measure" field.</summary>
    public const int MeasureFieldNumber = 3;
    private global::Opencensus.Proto.Stats.V1.Measure measure_;
    /// <summary>
    /// The Measure to which this view is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.V1.Measure Measure {
      get { return measure_; }
      set {
        measure_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_columns_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> columns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// An array of tag keys. These values associated with tags of this name form the basis by which
    /// individual stats will be aggregated (one aggregation per unique tag value). If none are
    /// provided, then all data is recorded in a single aggregation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "count_aggregation" field.</summary>
    public const int CountAggregationFieldNumber = 5;
    /// <summary>
    /// Counts the number of measurements recorded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.V1.CountAggregation CountAggregation {
      get { return aggregationCase_ == AggregationOneofCase.CountAggregation ? (global::Opencensus.Proto.Stats.V1.CountAggregation) aggregation_ : null; }
      set {
        aggregation_ = value;
        aggregationCase_ = value == null ? AggregationOneofCase.None : AggregationOneofCase.CountAggregation;
      }
    }

    /// <summary>Field number for the "sum_aggregation" field.</summary>
    public const int SumAggregationFieldNumber = 6;
    /// <summary>
    /// Indicates that data collected and aggregated with this Aggregation will be summed up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.V1.SumAggregation SumAggregation {
      get { return aggregationCase_ == AggregationOneofCase.SumAggregation ? (global::Opencensus.Proto.Stats.V1.SumAggregation) aggregation_ : null; }
      set {
        aggregation_ = value;
        aggregationCase_ = value == null ? AggregationOneofCase.None : AggregationOneofCase.SumAggregation;
      }
    }

    /// <summary>Field number for the "last_value_aggregation" field.</summary>
    public const int LastValueAggregationFieldNumber = 7;
    /// <summary>
    /// Indicates that data collected and aggregated with this Aggregation will represent the last
    /// recorded value. This is useful to support Gauges.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.V1.LastValueAggregation LastValueAggregation {
      get { return aggregationCase_ == AggregationOneofCase.LastValueAggregation ? (global::Opencensus.Proto.Stats.V1.LastValueAggregation) aggregation_ : null; }
      set {
        aggregation_ = value;
        aggregationCase_ = value == null ? AggregationOneofCase.None : AggregationOneofCase.LastValueAggregation;
      }
    }

    /// <summary>Field number for the "distribution_aggregation" field.</summary>
    public const int DistributionAggregationFieldNumber = 8;
    /// <summary>
    /// Indicates that the desired Aggregation is a histogram distribution. A distribution
    /// Aggregation may contain a histogram of the values in the population. User should define the
    /// bucket boundaries for that histogram (see DistributionAggregation).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.V1.DistributionAggregation DistributionAggregation {
      get { return aggregationCase_ == AggregationOneofCase.DistributionAggregation ? (global::Opencensus.Proto.Stats.V1.DistributionAggregation) aggregation_ : null; }
      set {
        aggregation_ = value;
        aggregationCase_ = value == null ? AggregationOneofCase.None : AggregationOneofCase.DistributionAggregation;
      }
    }

    private object aggregation_;
    /// <summary>Enum of possible cases for the "aggregation" oneof.</summary>
    public enum AggregationOneofCase {
      None = 0,
      CountAggregation = 5,
      SumAggregation = 6,
      LastValueAggregation = 7,
      DistributionAggregation = 8,
    }
    private AggregationOneofCase aggregationCase_ = AggregationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregationOneofCase AggregationCase {
      get { return aggregationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAggregation() {
      aggregationCase_ = AggregationOneofCase.None;
      aggregation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as View);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(View other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Measure, other.Measure)) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if (!object.Equals(CountAggregation, other.CountAggregation)) return false;
      if (!object.Equals(SumAggregation, other.SumAggregation)) return false;
      if (!object.Equals(LastValueAggregation, other.LastValueAggregation)) return false;
      if (!object.Equals(DistributionAggregation, other.DistributionAggregation)) return false;
      if (AggregationCase != other.AggregationCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (measure_ != null) hash ^= Measure.GetHashCode();
      hash ^= columns_.GetHashCode();
      if (aggregationCase_ == AggregationOneofCase.CountAggregation) hash ^= CountAggregation.GetHashCode();
      if (aggregationCase_ == AggregationOneofCase.SumAggregation) hash ^= SumAggregation.GetHashCode();
      if (aggregationCase_ == AggregationOneofCase.LastValueAggregation) hash ^= LastValueAggregation.GetHashCode();
      if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) hash ^= DistributionAggregation.GetHashCode();
      hash ^= (int) aggregationCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (measure_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Measure);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      if (aggregationCase_ == AggregationOneofCase.CountAggregation) {
        output.WriteRawTag(42);
        output.WriteMessage(CountAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.SumAggregation) {
        output.WriteRawTag(50);
        output.WriteMessage(SumAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.LastValueAggregation) {
        output.WriteRawTag(58);
        output.WriteMessage(LastValueAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) {
        output.WriteRawTag(66);
        output.WriteMessage(DistributionAggregation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (measure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Measure);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (aggregationCase_ == AggregationOneofCase.CountAggregation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CountAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.SumAggregation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SumAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.LastValueAggregation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastValueAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistributionAggregation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(View other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.measure_ != null) {
        if (measure_ == null) {
          Measure = new global::Opencensus.Proto.Stats.V1.Measure();
        }
        Measure.MergeFrom(other.Measure);
      }
      columns_.Add(other.columns_);
      switch (other.AggregationCase) {
        case AggregationOneofCase.CountAggregation:
          if (CountAggregation == null) {
            CountAggregation = new global::Opencensus.Proto.Stats.V1.CountAggregation();
          }
          CountAggregation.MergeFrom(other.CountAggregation);
          break;
        case AggregationOneofCase.SumAggregation:
          if (SumAggregation == null) {
            SumAggregation = new global::Opencensus.Proto.Stats.V1.SumAggregation();
          }
          SumAggregation.MergeFrom(other.SumAggregation);
          break;
        case AggregationOneofCase.LastValueAggregation:
          if (LastValueAggregation == null) {
            LastValueAggregation = new global::Opencensus.Proto.Stats.V1.LastValueAggregation();
          }
          LastValueAggregation.MergeFrom(other.LastValueAggregation);
          break;
        case AggregationOneofCase.DistributionAggregation:
          if (DistributionAggregation == null) {
            DistributionAggregation = new global::Opencensus.Proto.Stats.V1.DistributionAggregation();
          }
          DistributionAggregation.MergeFrom(other.DistributionAggregation);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (measure_ == null) {
              Measure = new global::Opencensus.Proto.Stats.V1.Measure();
            }
            input.ReadMessage(Measure);
            break;
          }
          case 34: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 42: {
            global::Opencensus.Proto.Stats.V1.CountAggregation subBuilder = new global::Opencensus.Proto.Stats.V1.CountAggregation();
            if (aggregationCase_ == AggregationOneofCase.CountAggregation) {
              subBuilder.MergeFrom(CountAggregation);
            }
            input.ReadMessage(subBuilder);
            CountAggregation = subBuilder;
            break;
          }
          case 50: {
            global::Opencensus.Proto.Stats.V1.SumAggregation subBuilder = new global::Opencensus.Proto.Stats.V1.SumAggregation();
            if (aggregationCase_ == AggregationOneofCase.SumAggregation) {
              subBuilder.MergeFrom(SumAggregation);
            }
            input.ReadMessage(subBuilder);
            SumAggregation = subBuilder;
            break;
          }
          case 58: {
            global::Opencensus.Proto.Stats.V1.LastValueAggregation subBuilder = new global::Opencensus.Proto.Stats.V1.LastValueAggregation();
            if (aggregationCase_ == AggregationOneofCase.LastValueAggregation) {
              subBuilder.MergeFrom(LastValueAggregation);
            }
            input.ReadMessage(subBuilder);
            LastValueAggregation = subBuilder;
            break;
          }
          case 66: {
            global::Opencensus.Proto.Stats.V1.DistributionAggregation subBuilder = new global::Opencensus.Proto.Stats.V1.DistributionAggregation();
            if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) {
              subBuilder.MergeFrom(DistributionAggregation);
            }
            input.ReadMessage(subBuilder);
            DistributionAggregation = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CountAggregation : pb::IMessage<CountAggregation> {
    private static readonly pb::MessageParser<CountAggregation> _parser = new pb::MessageParser<CountAggregation>(() => new CountAggregation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CountAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountAggregation(CountAggregation other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CountAggregation Clone() {
      return new CountAggregation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CountAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CountAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CountAggregation other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SumAggregation : pb::IMessage<SumAggregation> {
    private static readonly pb::MessageParser<SumAggregation> _parser = new pb::MessageParser<SumAggregation>(() => new SumAggregation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SumAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumAggregation(SumAggregation other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumAggregation Clone() {
      return new SumAggregation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SumAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SumAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SumAggregation other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LastValueAggregation : pb::IMessage<LastValueAggregation> {
    private static readonly pb::MessageParser<LastValueAggregation> _parser = new pb::MessageParser<LastValueAggregation>(() => new LastValueAggregation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LastValueAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastValueAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastValueAggregation(LastValueAggregation other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LastValueAggregation Clone() {
      return new LastValueAggregation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LastValueAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LastValueAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LastValueAggregation other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DistributionAggregation : pb::IMessage<DistributionAggregation> {
    private static readonly pb::MessageParser<DistributionAggregation> _parser = new pb::MessageParser<DistributionAggregation>(() => new DistributionAggregation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributionAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregation(DistributionAggregation other) : this() {
      bucketBounds_ = other.bucketBounds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregation Clone() {
      return new DistributionAggregation(this);
    }

    /// <summary>Field number for the "bucket_bounds" field.</summary>
    public const int BucketBoundsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_bucketBounds_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> bucketBounds_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// A Distribution may optionally contain a histogram of the values in the
    /// population. The bucket boundaries for that histogram are described by
    /// `bucket_bounds`. This defines `size(bucket_bounds) + 1` (= N)
    /// buckets. The boundaries for bucket index i are:
    ///
    /// (-infinity, bucket_bounds[i]) for i == 0
    /// [bucket_bounds[i-1], bucket_bounds[i]) for 0 &lt; i &lt; N-2
    /// [bucket_bounds[i-1], +infinity) for i == N-1
    ///
    /// i.e. an underflow bucket (number 0), zero or more finite buckets (1
    /// through N - 2, and an overflow bucket (N - 1), with inclusive lower
    /// bounds and exclusive upper bounds.
    ///
    /// If `bucket_bounds` has no elements (zero size), then there is no
    /// histogram associated with the Distribution. If `bucket_bounds` has only
    /// one element, there are no finite buckets, and that single element is the
    /// common boundary of the overflow and underflow buckets. The values must
    /// be monotonically increasing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> BucketBounds {
      get { return bucketBounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributionAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributionAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bucketBounds_.Equals(other.bucketBounds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bucketBounds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bucketBounds_.WriteTo(output, _repeated_bucketBounds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bucketBounds_.CalculateSize(_repeated_bucketBounds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributionAggregation other) {
      if (other == null) {
        return;
      }
      bucketBounds_.Add(other.bucketBounds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            bucketBounds_.AddEntriesFrom(input, _repeated_bucketBounds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Describes a data point to be collected for a Measure.
  /// </summary>
  public sealed partial class Measurement : pb::IMessage<Measurement> {
    private static readonly pb::MessageParser<Measurement> _parser = new pb::MessageParser<Measurement>(() => new Measurement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Measurement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.V1.StatsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement(Measurement other) : this() {
      tags_ = other.tags_.Clone();
      measureName_ = other.measureName_;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      switch (other.ValueCase) {
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement Clone() {
      return new Measurement(this);
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.V1.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(10, global::Opencensus.Proto.Stats.V1.Tag.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.V1.Tag> tags_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.V1.Tag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Stats.V1.Tag> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "measure_name" field.</summary>
    public const int MeasureNameFieldNumber = 2;
    private string measureName_ = "";
    /// <summary>
    /// The name of the measure to which the value is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasureName {
      get { return measureName_; }
      set {
        measureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntValue {
      get { return valueCase_ == ValueOneofCase.IntValue ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.IntValue;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
    /// <summary>
    /// The time when this measurement was recorded. If the implementation uses a async buffer to
    /// record measurements this may be the time when the measurement was read from the buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      DoubleValue = 3,
      IntValue = 4,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Measurement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Measurement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tags_.Equals(other.tags_)) return false;
      if (MeasureName != other.MeasureName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (IntValue != other.IntValue) return false;
      if (!object.Equals(Time, other.Time)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tags_.GetHashCode();
      if (MeasureName.Length != 0) hash ^= MeasureName.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (valueCase_ == ValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
      if (time_ != null) hash ^= Time.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tags_.WriteTo(output, _repeated_tags_codec);
      if (MeasureName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MeasureName);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(25);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        output.WriteRawTag(32);
        output.WriteInt64(IntValue);
      }
      if (time_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (MeasureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasureName);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
      }
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Measurement other) {
      if (other == null) {
        return;
      }
      tags_.Add(other.tags_);
      if (other.MeasureName.Length != 0) {
        MeasureName = other.MeasureName;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Time.MergeFrom(other.Time);
      }
      switch (other.ValueCase) {
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 18: {
            MeasureName = input.ReadString();
            break;
          }
          case 25: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 32: {
            IntValue = input.ReadInt64();
            break;
          }
          case 42: {
            if (time_ == null) {
              Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Time);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
