// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v3alpha/core/base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V3Alpha.Core {

  /// <summary>Holder for reflection information generated from envoy/api/v3alpha/core/base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v3alpha/core/base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFlbnZveS9hcGkvdjNhbHBoYS9jb3JlL2Jhc2UucHJvdG8SFmVudm95LmFw",
            "aS52M2FscGhhLmNvcmUaJWVudm95L2FwaS92M2FscGhhL2NvcmUvaHR0cF91",
            "cmkucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8aHGdvb2dsZS9w",
            "cm90b2J1Zi9zdHJ1Y3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVy",
            "cy5wcm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJvdG8aGGVudm95L3R5cGUv",
            "cGVyY2VudC5wcm90byI6CghMb2NhbGl0eRIOCgZyZWdpb24YASABKAkSDAoE",
            "em9uZRgCIAEoCRIQCghzdWJfem9uZRgDIAEoCSKZAQoETm9kZRIKCgJpZBgB",
            "IAEoCRIPCgdjbHVzdGVyGAIgASgJEikKCG1ldGFkYXRhGAMgASgLMhcuZ29v",
            "Z2xlLnByb3RvYnVmLlN0cnVjdBIyCghsb2NhbGl0eRgEIAEoCzIgLmVudm95",
            "LmFwaS52M2FscGhhLmNvcmUuTG9jYWxpdHkSFQoNYnVpbGRfdmVyc2lvbhgF",
            "IAEoCSKpAQoITWV0YWRhdGESTQoPZmlsdGVyX21ldGFkYXRhGAEgAygLMjQu",
            "ZW52b3kuYXBpLnYzYWxwaGEuY29yZS5NZXRhZGF0YS5GaWx0ZXJNZXRhZGF0",
            "YUVudHJ5Gk4KE0ZpbHRlck1ldGFkYXRhRW50cnkSCwoDa2V5GAEgASgJEiYK",
            "BXZhbHVlGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdDoCOAEiRgoN",
            "UnVudGltZVVJbnQzMhIVCg1kZWZhdWx0X3ZhbHVlGAIgASgNEh4KC3J1bnRp",
            "bWVfa2V5GAMgASgJQgm66cADBHICIAEiRQoLSGVhZGVyVmFsdWUSGgoDa2V5",
            "GAEgASgJQg266cADCHIGIAEogIABEhoKBXZhbHVlGAIgASgJQgu66cADBnIE",
            "KICAASKAAQoRSGVhZGVyVmFsdWVPcHRpb24SPwoGaGVhZGVyGAEgASgLMiMu",
            "ZW52b3kuYXBpLnYzYWxwaGEuY29yZS5IZWFkZXJWYWx1ZUIKuunAAwWKAQIQ",
            "ARIqCgZhcHBlbmQYAiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "IkEKCUhlYWRlck1hcBI0CgdoZWFkZXJzGAEgAygLMiMuZW52b3kuYXBpLnYz",
            "YWxwaGEuY29yZS5IZWFkZXJWYWx1ZSKGAQoKRGF0YVNvdXJjZRIdCghmaWxl",
            "bmFtZRgBIAEoCUIJuunAAwRyAiABSAASIQoMaW5saW5lX2J5dGVzGAIgASgM",
            "Qgm66cADBHoCEAFIABIiCg1pbmxpbmVfc3RyaW5nGAMgASgJQgm66cADBHIC",
            "IAFIAEISCglzcGVjaWZpZXISBbjpwAMBImwKEFJlbW90ZURhdGFTb3VyY2US",
            "PQoIaHR0cF91cmkYASABKAsyHy5lbnZveS5hcGkudjNhbHBoYS5jb3JlLkh0",
            "dHBVcmlCCrrpwAMFigECEAESGQoGc2hhMjU2GAIgASgJQgm66cADBHICIAEi",
            "lgEKD0FzeW5jRGF0YVNvdXJjZRIzCgVsb2NhbBgBIAEoCzIiLmVudm95LmFw",
            "aS52M2FscGhhLmNvcmUuRGF0YVNvdXJjZUgAEjoKBnJlbW90ZRgCIAEoCzIo",
            "LmVudm95LmFwaS52M2FscGhhLmNvcmUuUmVtb3RlRGF0YVNvdXJjZUgAQhIK",
            "CXNwZWNpZmllchIFuOnAAwEikgEKD1RyYW5zcG9ydFNvY2tldBIXCgRuYW1l",
            "GAEgASgJQgm66cADBHICIAESKQoGY29uZmlnGAIgASgLMhcuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cnVjdEgAEiwKDHR5cGVkX2NvbmZpZxgDIAEoCzIULmdvb2ds",
            "ZS5wcm90b2J1Zi5BbnlIAEINCgtjb25maWdfdHlwZSKPAgoMU29ja2V0T3B0",
            "aW9uEhMKC2Rlc2NyaXB0aW9uGAEgASgJEg0KBWxldmVsGAIgASgDEgwKBG5h",
            "bWUYAyABKAMSEwoJaW50X3ZhbHVlGAQgASgDSAASEwoJYnVmX3ZhbHVlGAUg",
            "ASgMSAASSwoFc3RhdGUYBiABKA4yMC5lbnZveS5hcGkudjNhbHBoYS5jb3Jl",
            "LlNvY2tldE9wdGlvbi5Tb2NrZXRTdGF0ZUIKuunAAwWCAQIQASJGCgtTb2Nr",
            "ZXRTdGF0ZRIRCg1TVEFURV9QUkVCSU5EEAASDwoLU1RBVEVfQk9VTkQQARIT",
            "Cg9TVEFURV9MSVNURU5JTkcQAkIOCgV2YWx1ZRIFuOnAAwEicQoYUnVudGlt",
            "ZUZyYWN0aW9uYWxQZXJjZW50EkAKDWRlZmF1bHRfdmFsdWUYASABKAsyHS5l",
            "bnZveS50eXBlLkZyYWN0aW9uYWxQZXJjZW50Qgq66cADBYoBAhABEhMKC3J1",
            "bnRpbWVfa2V5GAIgASgJIiIKDENvbnRyb2xQbGFuZRISCgppZGVudGlmaWVy",
            "GAEgASgJKigKD1JvdXRpbmdQcmlvcml0eRILCgdERUZBVUxUEAASCAoESElH",
            "SBABKokBCg1SZXF1ZXN0TWV0aG9kEhYKEk1FVEhPRF9VTlNQRUNJRklFRBAA",
            "EgcKA0dFVBABEggKBEhFQUQQAhIICgRQT1NUEAMSBwoDUFVUEAQSCgoGREVM",
            "RVRFEAUSCwoHQ09OTkVDVBAGEgsKB09QVElPTlMQBxIJCgVUUkFDRRAIEgkK",
            "BVBBVENIEAkqPgoQVHJhZmZpY0RpcmVjdGlvbhIPCgtVTlNQRUNJRklFRBAA",
            "EgsKB0lOQk9VTkQQARIMCghPVVRCT1VORBACQjMKJGlvLmVudm95cHJveHku",
            "ZW52b3kuYXBpLnYzYWxwaGEuY29yZUIJQmFzZVByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V3Alpha.Core.HttpUriReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Envoy.Type.PercentReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Envoy.Api.V3Alpha.Core.RoutingPriority), typeof(global::Envoy.Api.V3Alpha.Core.RequestMethod), typeof(global::Envoy.Api.V3Alpha.Core.TrafficDirection), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.Locality), global::Envoy.Api.V3Alpha.Core.Locality.Parser, new[]{ "Region", "Zone", "SubZone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.Node), global::Envoy.Api.V3Alpha.Core.Node.Parser, new[]{ "Id", "Cluster", "Metadata", "Locality", "BuildVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.Metadata), global::Envoy.Api.V3Alpha.Core.Metadata.Parser, new[]{ "FilterMetadata" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.RuntimeUInt32), global::Envoy.Api.V3Alpha.Core.RuntimeUInt32.Parser, new[]{ "DefaultValue", "RuntimeKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.HeaderValue), global::Envoy.Api.V3Alpha.Core.HeaderValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.HeaderValueOption), global::Envoy.Api.V3Alpha.Core.HeaderValueOption.Parser, new[]{ "Header", "Append" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.HeaderMap), global::Envoy.Api.V3Alpha.Core.HeaderMap.Parser, new[]{ "Headers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.DataSource), global::Envoy.Api.V3Alpha.Core.DataSource.Parser, new[]{ "Filename", "InlineBytes", "InlineString" }, new[]{ "Specifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.RemoteDataSource), global::Envoy.Api.V3Alpha.Core.RemoteDataSource.Parser, new[]{ "HttpUri", "Sha256" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.AsyncDataSource), global::Envoy.Api.V3Alpha.Core.AsyncDataSource.Parser, new[]{ "Local", "Remote" }, new[]{ "Specifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.TransportSocket), global::Envoy.Api.V3Alpha.Core.TransportSocket.Parser, new[]{ "Name", "Config", "TypedConfig" }, new[]{ "ConfigType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.SocketOption), global::Envoy.Api.V3Alpha.Core.SocketOption.Parser, new[]{ "Description", "Level", "Name", "IntValue", "BufValue", "State" }, new[]{ "Value" }, new[]{ typeof(global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.RuntimeFractionalPercent), global::Envoy.Api.V3Alpha.Core.RuntimeFractionalPercent.Parser, new[]{ "DefaultValue", "RuntimeKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.Core.ControlPlane), global::Envoy.Api.V3Alpha.Core.ControlPlane.Parser, new[]{ "Identifier" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Envoy supports :ref:`upstream priority routing
  /// &lt;arch_overview_http_routing_priority>` both at the route and the virtual
  /// cluster level. The current priority implementation uses different connection
  /// pool and circuit breaking settings for each priority level. This means that
  /// even for HTTP/2 requests, two physical connections will be used to an
  /// upstream host. In the future Envoy will likely support true HTTP/2 priority
  /// over a single upstream connection.
  /// </summary>
  public enum RoutingPriority {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("HIGH")] High = 1,
  }

  /// <summary>
  /// HTTP request method.
  /// </summary>
  public enum RequestMethod {
    [pbr::OriginalName("METHOD_UNSPECIFIED")] MethodUnspecified = 0,
    [pbr::OriginalName("GET")] Get = 1,
    [pbr::OriginalName("HEAD")] Head = 2,
    [pbr::OriginalName("POST")] Post = 3,
    [pbr::OriginalName("PUT")] Put = 4,
    [pbr::OriginalName("DELETE")] Delete = 5,
    [pbr::OriginalName("CONNECT")] Connect = 6,
    [pbr::OriginalName("OPTIONS")] Options = 7,
    [pbr::OriginalName("TRACE")] Trace = 8,
    [pbr::OriginalName("PATCH")] Patch = 9,
  }

  /// <summary>
  /// Identifies the direction of the traffic relative to the local Envoy.
  /// </summary>
  public enum TrafficDirection {
    /// <summary>
    /// Default option is unspecified.
    /// </summary>
    [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// The transport is used for incoming traffic.
    /// </summary>
    [pbr::OriginalName("INBOUND")] Inbound = 1,
    /// <summary>
    /// The transport is used for outgoing traffic.
    /// </summary>
    [pbr::OriginalName("OUTBOUND")] Outbound = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Identifies location of where either Envoy runs or where upstream hosts run.
  /// </summary>
  public sealed partial class Locality : pb::IMessage<Locality> {
    private static readonly pb::MessageParser<Locality> _parser = new pb::MessageParser<Locality>(() => new Locality());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Locality> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Locality() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Locality(Locality other) : this() {
      region_ = other.region_;
      zone_ = other.zone_;
      subZone_ = other.subZone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Locality Clone() {
      return new Locality(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private string region_ = "";
    /// <summary>
    /// Region this :ref:`zone &lt;envoy_api_field_core.Locality.zone>` belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 2;
    private string zone_ = "";
    /// <summary>
    /// Defines the local service zone where Envoy is running. Though optional, it
    /// should be set if discovery service routing is used and the discovery
    /// service exposes :ref:`zone data &lt;envoy_api_field_endpoint.LocalityLbEndpoints.locality>`,
    /// either in this message or via :option:`--service-zone`. The meaning of zone
    /// is context dependent, e.g. `Availability Zone (AZ)
    /// &lt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
    /// on AWS, `Zone &lt;https://cloud.google.com/compute/docs/regions-zones/>`_ on
    /// GCP, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zone {
      get { return zone_; }
      set {
        zone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_zone" field.</summary>
    public const int SubZoneFieldNumber = 3;
    private string subZone_ = "";
    /// <summary>
    /// When used for locality of upstream hosts, this field further splits zone
    /// into smaller chunks of sub-zones so they can be load balanced
    /// independently.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubZone {
      get { return subZone_; }
      set {
        subZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Locality);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Locality other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Region != other.Region) return false;
      if (Zone != other.Zone) return false;
      if (SubZone != other.SubZone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Zone.Length != 0) hash ^= Zone.GetHashCode();
      if (SubZone.Length != 0) hash ^= SubZone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Region.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Region);
      }
      if (Zone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zone);
      }
      if (SubZone.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SubZone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Zone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zone);
      }
      if (SubZone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubZone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Locality other) {
      if (other == null) {
        return;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Zone.Length != 0) {
        Zone = other.Zone;
      }
      if (other.SubZone.Length != 0) {
        SubZone = other.SubZone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Region = input.ReadString();
            break;
          }
          case 18: {
            Zone = input.ReadString();
            break;
          }
          case 26: {
            SubZone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Identifies a specific Envoy instance. The node identifier is presented to the
  /// management server, which may use this identifier to distinguish per Envoy
  /// configuration for serving.
  /// </summary>
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      id_ = other.id_;
      cluster_ = other.cluster_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      locality_ = other.locality_ != null ? other.locality_.Clone() : null;
      buildVersion_ = other.buildVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// An opaque node identifier for the Envoy node. This also provides the local
    /// service node name. It should be set if any of the following features are
    /// used: :ref:`statsd &lt;arch_overview_statistics>`, :ref:`CDS
    /// &lt;config_cluster_manager_cds>`, and :ref:`HTTP tracing
    /// &lt;arch_overview_tracing>`, either in this message or via
    /// :option:`--service-node`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 2;
    private string cluster_ = "";
    /// <summary>
    /// Defines the local service cluster name where Envoy is running. Though
    /// optional, it should be set if any of the following features are used:
    /// :ref:`statsd &lt;arch_overview_statistics>`, :ref:`health check cluster
    /// verification &lt;envoy_api_field_core.HealthCheck.HttpHealthCheck.service_name>`,
    /// :ref:`runtime override directory &lt;envoy_api_msg_config.bootstrap.v3alpha.Runtime>`,
    /// :ref:`user agent addition
    /// &lt;envoy_api_field_config.filter.network.http_connection_manager.v3alpha.HttpConnectionManager.add_user_agent>`,
    /// :ref:`HTTP global rate limiting &lt;config_http_filters_rate_limit>`,
    /// :ref:`CDS &lt;config_cluster_manager_cds>`, and :ref:`HTTP tracing
    /// &lt;arch_overview_tracing>`, either in this message or via
    /// :option:`--service-cluster`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cluster {
      get { return cluster_; }
      set {
        cluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Struct metadata_;
    /// <summary>
    /// Opaque metadata extending the node identifier. Envoy will pass this
    /// directly to the management server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "locality" field.</summary>
    public const int LocalityFieldNumber = 4;
    private global::Envoy.Api.V3Alpha.Core.Locality locality_;
    /// <summary>
    /// Locality specifying where the Envoy instance is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.Locality Locality {
      get { return locality_; }
      set {
        locality_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 5;
    private string buildVersion_ = "";
    /// <summary>
    /// This is motivated by informing a management server during canary which
    /// version of Envoy is being tested in a heterogeneous fleet. This will be set
    /// by Envoy in management server RPCs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cluster != other.Cluster) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Locality, other.Locality)) return false;
      if (BuildVersion != other.BuildVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Cluster.Length != 0) hash ^= Cluster.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (locality_ != null) hash ^= Locality.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Cluster.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cluster);
      }
      if (metadata_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Metadata);
      }
      if (locality_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Locality);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BuildVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Cluster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cluster);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (locality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Locality);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Cluster.Length != 0) {
        Cluster = other.Cluster;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.locality_ != null) {
        if (locality_ == null) {
          Locality = new global::Envoy.Api.V3Alpha.Core.Locality();
        }
        Locality.MergeFrom(other.Locality);
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Cluster = input.ReadString();
            break;
          }
          case 26: {
            if (metadata_ == null) {
              Metadata = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 34: {
            if (locality_ == null) {
              Locality = new global::Envoy.Api.V3Alpha.Core.Locality();
            }
            input.ReadMessage(Locality);
            break;
          }
          case 42: {
            BuildVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata provides additional inputs to filters based on matched listeners,
  /// filter chains, routes and endpoints. It is structured as a map, usually from
  /// filter name (in reverse DNS format) to metadata specific to the filter. Metadata
  /// key-values for a filter are merged as connection and request handling occurs,
  /// with later values for the same key overriding earlier values.
  ///
  /// An example use of metadata is providing additional values to
  /// http_connection_manager in the envoy.http_connection_manager.access_log
  /// namespace.
  ///
  /// Another example use of metadata is to per service config info in cluster metadata, which may get
  /// consumed by multiple filters.
  ///
  /// For load balancing, Metadata provides a means to subset cluster endpoints.
  /// Endpoints have a Metadata object associated and routes contain a Metadata
  /// object to match against. There are some well defined metadata used today for
  /// this purpose:
  ///
  /// * ``{"envoy.lb": {"canary": &lt;bool> }}`` This indicates the canary status of an
  ///   endpoint and is also used during header processing
  ///   (x-envoy-upstream-canary) and for stats purposes.
  /// </summary>
  public sealed partial class Metadata : pb::IMessage<Metadata> {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      filterMetadata_ = other.filterMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "filter_metadata" field.</summary>
    public const int FilterMetadataFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct>.Codec _map_filterMetadata_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Struct.Parser), 10);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct> filterMetadata_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct>();
    /// <summary>
    /// Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
    /// namespace is reserved for Envoy's built-in filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Struct> FilterMetadata {
      get { return filterMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!FilterMetadata.Equals(other.FilterMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= FilterMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filterMetadata_.WriteTo(output, _map_filterMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filterMetadata_.CalculateSize(_map_filterMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      filterMetadata_.Add(other.filterMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            filterMetadata_.AddEntriesFrom(input, _map_filterMetadata_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Runtime derived uint32 with a default when not specified.
  /// </summary>
  public sealed partial class RuntimeUInt32 : pb::IMessage<RuntimeUInt32> {
    private static readonly pb::MessageParser<RuntimeUInt32> _parser = new pb::MessageParser<RuntimeUInt32>(() => new RuntimeUInt32());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuntimeUInt32> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeUInt32() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeUInt32(RuntimeUInt32 other) : this() {
      defaultValue_ = other.defaultValue_;
      runtimeKey_ = other.runtimeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeUInt32 Clone() {
      return new RuntimeUInt32(this);
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 2;
    private uint defaultValue_;
    /// <summary>
    /// Default value if runtime value is not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = value;
      }
    }

    /// <summary>Field number for the "runtime_key" field.</summary>
    public const int RuntimeKeyFieldNumber = 3;
    private string runtimeKey_ = "";
    /// <summary>
    /// Runtime key to get value for comparison. This value is used if defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeKey {
      get { return runtimeKey_; }
      set {
        runtimeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuntimeUInt32);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuntimeUInt32 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefaultValue != other.DefaultValue) return false;
      if (RuntimeKey != other.RuntimeKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefaultValue != 0) hash ^= DefaultValue.GetHashCode();
      if (RuntimeKey.Length != 0) hash ^= RuntimeKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefaultValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DefaultValue);
      }
      if (RuntimeKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RuntimeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefaultValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultValue);
      }
      if (RuntimeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuntimeUInt32 other) {
      if (other == null) {
        return;
      }
      if (other.DefaultValue != 0) {
        DefaultValue = other.DefaultValue;
      }
      if (other.RuntimeKey.Length != 0) {
        RuntimeKey = other.RuntimeKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            DefaultValue = input.ReadUInt32();
            break;
          }
          case 26: {
            RuntimeKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Header name/value pair.
  /// </summary>
  public sealed partial class HeaderValue : pb::IMessage<HeaderValue> {
    private static readonly pb::MessageParser<HeaderValue> _parser = new pb::MessageParser<HeaderValue>(() => new HeaderValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeaderValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValue(HeaderValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValue Clone() {
      return new HeaderValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Header name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Header value.
    ///
    /// The same :ref:`format specifier &lt;config_access_log_format>` as used for
    /// :ref:`HTTP access logging &lt;config_access_log>` applies here, however
    /// unknown header values are replaced with the empty string instead of `-`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeaderValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeaderValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeaderValue other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Header name/value pair plus option to control append behavior.
  /// </summary>
  public sealed partial class HeaderValueOption : pb::IMessage<HeaderValueOption> {
    private static readonly pb::MessageParser<HeaderValueOption> _parser = new pb::MessageParser<HeaderValueOption>(() => new HeaderValueOption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeaderValueOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValueOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValueOption(HeaderValueOption other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      Append = other.Append;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderValueOption Clone() {
      return new HeaderValueOption(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Envoy.Api.V3Alpha.Core.HeaderValue header_;
    /// <summary>
    /// Header name/value pair that this option applies to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.HeaderValue Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "append" field.</summary>
    public const int AppendFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_append_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? append_;
    /// <summary>
    /// Should the value be appended? If true (default), the value is appended to
    /// existing values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Append {
      get { return append_; }
      set {
        append_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeaderValueOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeaderValueOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Append != other.Append) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (append_ != null) hash ^= Append.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (append_ != null) {
        _single_append_codec.WriteTagAndValue(output, Append);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (append_ != null) {
        size += _single_append_codec.CalculateSizeWithTag(Append);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeaderValueOption other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Envoy.Api.V3Alpha.Core.HeaderValue();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.append_ != null) {
        if (append_ == null || other.Append != false) {
          Append = other.Append;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Envoy.Api.V3Alpha.Core.HeaderValue();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            bool? value = _single_append_codec.Read(input);
            if (append_ == null || value != false) {
              Append = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Wrapper for a set of headers.
  /// </summary>
  public sealed partial class HeaderMap : pb::IMessage<HeaderMap> {
    private static readonly pb::MessageParser<HeaderMap> _parser = new pb::MessageParser<HeaderMap>(() => new HeaderMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeaderMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderMap(HeaderMap other) : this() {
      headers_ = other.headers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeaderMap Clone() {
      return new HeaderMap(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.Core.HeaderValue> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::Envoy.Api.V3Alpha.Core.HeaderValue.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValue> headers_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValue> Headers {
      get { return headers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeaderMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeaderMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeaderMap other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data source consisting of either a file or an inline value.
  /// </summary>
  public sealed partial class DataSource : pb::IMessage<DataSource> {
    private static readonly pb::MessageParser<DataSource> _parser = new pb::MessageParser<DataSource>(() => new DataSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource(DataSource other) : this() {
      switch (other.SpecifierCase) {
        case SpecifierOneofCase.Filename:
          Filename = other.Filename;
          break;
        case SpecifierOneofCase.InlineBytes:
          InlineBytes = other.InlineBytes;
          break;
        case SpecifierOneofCase.InlineString:
          InlineString = other.InlineString;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSource Clone() {
      return new DataSource(this);
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 1;
    /// <summary>
    /// Local filesystem data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return specifierCase_ == SpecifierOneofCase.Filename ? (string) specifier_ : ""; }
      set {
        specifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        specifierCase_ = SpecifierOneofCase.Filename;
      }
    }

    /// <summary>Field number for the "inline_bytes" field.</summary>
    public const int InlineBytesFieldNumber = 2;
    /// <summary>
    /// Bytes inlined in the configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InlineBytes {
      get { return specifierCase_ == SpecifierOneofCase.InlineBytes ? (pb::ByteString) specifier_ : pb::ByteString.Empty; }
      set {
        specifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        specifierCase_ = SpecifierOneofCase.InlineBytes;
      }
    }

    /// <summary>Field number for the "inline_string" field.</summary>
    public const int InlineStringFieldNumber = 3;
    /// <summary>
    /// String inlined in the configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InlineString {
      get { return specifierCase_ == SpecifierOneofCase.InlineString ? (string) specifier_ : ""; }
      set {
        specifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        specifierCase_ = SpecifierOneofCase.InlineString;
      }
    }

    private object specifier_;
    /// <summary>Enum of possible cases for the "specifier" oneof.</summary>
    public enum SpecifierOneofCase {
      None = 0,
      Filename = 1,
      InlineBytes = 2,
      InlineString = 3,
    }
    private SpecifierOneofCase specifierCase_ = SpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecifierOneofCase SpecifierCase {
      get { return specifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpecifier() {
      specifierCase_ = SpecifierOneofCase.None;
      specifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filename != other.Filename) return false;
      if (InlineBytes != other.InlineBytes) return false;
      if (InlineString != other.InlineString) return false;
      if (SpecifierCase != other.SpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (specifierCase_ == SpecifierOneofCase.Filename) hash ^= Filename.GetHashCode();
      if (specifierCase_ == SpecifierOneofCase.InlineBytes) hash ^= InlineBytes.GetHashCode();
      if (specifierCase_ == SpecifierOneofCase.InlineString) hash ^= InlineString.GetHashCode();
      hash ^= (int) specifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (specifierCase_ == SpecifierOneofCase.Filename) {
        output.WriteRawTag(10);
        output.WriteString(Filename);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineBytes) {
        output.WriteRawTag(18);
        output.WriteBytes(InlineBytes);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineString) {
        output.WriteRawTag(26);
        output.WriteString(InlineString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (specifierCase_ == SpecifierOneofCase.Filename) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InlineBytes);
      }
      if (specifierCase_ == SpecifierOneofCase.InlineString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InlineString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSource other) {
      if (other == null) {
        return;
      }
      switch (other.SpecifierCase) {
        case SpecifierOneofCase.Filename:
          Filename = other.Filename;
          break;
        case SpecifierOneofCase.InlineBytes:
          InlineBytes = other.InlineBytes;
          break;
        case SpecifierOneofCase.InlineString:
          InlineString = other.InlineString;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Filename = input.ReadString();
            break;
          }
          case 18: {
            InlineBytes = input.ReadBytes();
            break;
          }
          case 26: {
            InlineString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The message specifies how to fetch data from remote and how to verify it.
  /// </summary>
  public sealed partial class RemoteDataSource : pb::IMessage<RemoteDataSource> {
    private static readonly pb::MessageParser<RemoteDataSource> _parser = new pb::MessageParser<RemoteDataSource>(() => new RemoteDataSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteDataSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteDataSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteDataSource(RemoteDataSource other) : this() {
      httpUri_ = other.httpUri_ != null ? other.httpUri_.Clone() : null;
      sha256_ = other.sha256_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteDataSource Clone() {
      return new RemoteDataSource(this);
    }

    /// <summary>Field number for the "http_uri" field.</summary>
    public const int HttpUriFieldNumber = 1;
    private global::Envoy.Api.V3Alpha.Core.HttpUri httpUri_;
    /// <summary>
    /// The HTTP URI to fetch the remote data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.HttpUri HttpUri {
      get { return httpUri_; }
      set {
        httpUri_ = value;
      }
    }

    /// <summary>Field number for the "sha256" field.</summary>
    public const int Sha256FieldNumber = 2;
    private string sha256_ = "";
    /// <summary>
    /// SHA256 string for verifying data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sha256 {
      get { return sha256_; }
      set {
        sha256_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteDataSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteDataSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HttpUri, other.HttpUri)) return false;
      if (Sha256 != other.Sha256) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (httpUri_ != null) hash ^= HttpUri.GetHashCode();
      if (Sha256.Length != 0) hash ^= Sha256.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (httpUri_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HttpUri);
      }
      if (Sha256.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sha256);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (httpUri_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpUri);
      }
      if (Sha256.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sha256);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteDataSource other) {
      if (other == null) {
        return;
      }
      if (other.httpUri_ != null) {
        if (httpUri_ == null) {
          HttpUri = new global::Envoy.Api.V3Alpha.Core.HttpUri();
        }
        HttpUri.MergeFrom(other.HttpUri);
      }
      if (other.Sha256.Length != 0) {
        Sha256 = other.Sha256;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (httpUri_ == null) {
              HttpUri = new global::Envoy.Api.V3Alpha.Core.HttpUri();
            }
            input.ReadMessage(HttpUri);
            break;
          }
          case 18: {
            Sha256 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Async data source which support async data fetch.
  /// </summary>
  public sealed partial class AsyncDataSource : pb::IMessage<AsyncDataSource> {
    private static readonly pb::MessageParser<AsyncDataSource> _parser = new pb::MessageParser<AsyncDataSource>(() => new AsyncDataSource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AsyncDataSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsyncDataSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsyncDataSource(AsyncDataSource other) : this() {
      switch (other.SpecifierCase) {
        case SpecifierOneofCase.Local:
          Local = other.Local.Clone();
          break;
        case SpecifierOneofCase.Remote:
          Remote = other.Remote.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsyncDataSource Clone() {
      return new AsyncDataSource(this);
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 1;
    /// <summary>
    /// Local async data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.DataSource Local {
      get { return specifierCase_ == SpecifierOneofCase.Local ? (global::Envoy.Api.V3Alpha.Core.DataSource) specifier_ : null; }
      set {
        specifier_ = value;
        specifierCase_ = value == null ? SpecifierOneofCase.None : SpecifierOneofCase.Local;
      }
    }

    /// <summary>Field number for the "remote" field.</summary>
    public const int RemoteFieldNumber = 2;
    /// <summary>
    /// Remote async data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.RemoteDataSource Remote {
      get { return specifierCase_ == SpecifierOneofCase.Remote ? (global::Envoy.Api.V3Alpha.Core.RemoteDataSource) specifier_ : null; }
      set {
        specifier_ = value;
        specifierCase_ = value == null ? SpecifierOneofCase.None : SpecifierOneofCase.Remote;
      }
    }

    private object specifier_;
    /// <summary>Enum of possible cases for the "specifier" oneof.</summary>
    public enum SpecifierOneofCase {
      None = 0,
      Local = 1,
      Remote = 2,
    }
    private SpecifierOneofCase specifierCase_ = SpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecifierOneofCase SpecifierCase {
      get { return specifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpecifier() {
      specifierCase_ = SpecifierOneofCase.None;
      specifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AsyncDataSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AsyncDataSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Local, other.Local)) return false;
      if (!object.Equals(Remote, other.Remote)) return false;
      if (SpecifierCase != other.SpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (specifierCase_ == SpecifierOneofCase.Local) hash ^= Local.GetHashCode();
      if (specifierCase_ == SpecifierOneofCase.Remote) hash ^= Remote.GetHashCode();
      hash ^= (int) specifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (specifierCase_ == SpecifierOneofCase.Local) {
        output.WriteRawTag(10);
        output.WriteMessage(Local);
      }
      if (specifierCase_ == SpecifierOneofCase.Remote) {
        output.WriteRawTag(18);
        output.WriteMessage(Remote);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (specifierCase_ == SpecifierOneofCase.Local) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Local);
      }
      if (specifierCase_ == SpecifierOneofCase.Remote) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remote);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AsyncDataSource other) {
      if (other == null) {
        return;
      }
      switch (other.SpecifierCase) {
        case SpecifierOneofCase.Local:
          if (Local == null) {
            Local = new global::Envoy.Api.V3Alpha.Core.DataSource();
          }
          Local.MergeFrom(other.Local);
          break;
        case SpecifierOneofCase.Remote:
          if (Remote == null) {
            Remote = new global::Envoy.Api.V3Alpha.Core.RemoteDataSource();
          }
          Remote.MergeFrom(other.Remote);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Envoy.Api.V3Alpha.Core.DataSource subBuilder = new global::Envoy.Api.V3Alpha.Core.DataSource();
            if (specifierCase_ == SpecifierOneofCase.Local) {
              subBuilder.MergeFrom(Local);
            }
            input.ReadMessage(subBuilder);
            Local = subBuilder;
            break;
          }
          case 18: {
            global::Envoy.Api.V3Alpha.Core.RemoteDataSource subBuilder = new global::Envoy.Api.V3Alpha.Core.RemoteDataSource();
            if (specifierCase_ == SpecifierOneofCase.Remote) {
              subBuilder.MergeFrom(Remote);
            }
            input.ReadMessage(subBuilder);
            Remote = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Configuration for transport socket in :ref:`listeners &lt;config_listeners>` and
  /// :ref:`clusters &lt;envoy_api_msg_Cluster>`. If the configuration is
  /// empty, a default transport socket implementation and configuration will be
  /// chosen based on the platform and existence of tls_context.
  /// </summary>
  public sealed partial class TransportSocket : pb::IMessage<TransportSocket> {
    private static readonly pb::MessageParser<TransportSocket> _parser = new pb::MessageParser<TransportSocket>(() => new TransportSocket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransportSocket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportSocket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportSocket(TransportSocket other) : this() {
      name_ = other.name_;
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          Config = other.Config.Clone();
          break;
        case ConfigTypeOneofCase.TypedConfig:
          TypedConfig = other.TypedConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportSocket Clone() {
      return new TransportSocket(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the transport socket to instantiate. The name must match a supported transport
    /// socket implementation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return configTypeCase_ == ConfigTypeOneofCase.Config ? (global::Google.Protobuf.WellKnownTypes.Struct) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.Config;
      }
    }

    /// <summary>Field number for the "typed_config" field.</summary>
    public const int TypedConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TypedConfig {
      get { return configTypeCase_ == ConfigTypeOneofCase.TypedConfig ? (global::Google.Protobuf.WellKnownTypes.Any) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.TypedConfig;
      }
    }

    private object configType_;
    /// <summary>Enum of possible cases for the "config_type" oneof.</summary>
    public enum ConfigTypeOneofCase {
      None = 0,
      Config = 2,
      TypedConfig = 3,
    }
    private ConfigTypeOneofCase configTypeCase_ = ConfigTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTypeOneofCase ConfigTypeCase {
      get { return configTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfigType() {
      configTypeCase_ = ConfigTypeOneofCase.None;
      configType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransportSocket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransportSocket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(TypedConfig, other.TypedConfig)) return false;
      if (ConfigTypeCase != other.ConfigTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.Config) hash ^= Config.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) hash ^= TypedConfig.GetHashCode();
      hash ^= (int) configTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(TypedConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypedConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransportSocket other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          if (Config == null) {
            Config = new global::Google.Protobuf.WellKnownTypes.Struct();
          }
          Config.MergeFrom(other.Config);
          break;
        case ConfigTypeOneofCase.TypedConfig:
          if (TypedConfig == null) {
            TypedConfig = new global::Google.Protobuf.WellKnownTypes.Any();
          }
          TypedConfig.MergeFrom(other.TypedConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Struct subBuilder = new global::Google.Protobuf.WellKnownTypes.Struct();
            if (configTypeCase_ == ConfigTypeOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
              subBuilder.MergeFrom(TypedConfig);
            }
            input.ReadMessage(subBuilder);
            TypedConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic socket option message. This would be used to set socket options that
  /// might not exist in upstream kernels or precompiled Envoy binaries.
  /// </summary>
  public sealed partial class SocketOption : pb::IMessage<SocketOption> {
    private static readonly pb::MessageParser<SocketOption> _parser = new pb::MessageParser<SocketOption>(() => new SocketOption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocketOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketOption(SocketOption other) : this() {
      description_ = other.description_;
      level_ = other.level_;
      name_ = other.name_;
      state_ = other.state_;
      switch (other.ValueCase) {
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueOneofCase.BufValue:
          BufValue = other.BufValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketOption Clone() {
      return new SocketOption(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    /// <summary>
    /// An optional name to give this socket option for debugging, etc.
    /// Uniqueness is not required and no special meaning is assumed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private long level_;
    /// <summary>
    /// Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private long name_;
    /// <summary>
    /// The numeric name as passed to setsockopt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 4;
    /// <summary>
    /// Because many sockopts take an int value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntValue {
      get { return valueCase_ == ValueOneofCase.IntValue ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.IntValue;
      }
    }

    /// <summary>Field number for the "buf_value" field.</summary>
    public const int BufValueFieldNumber = 5;
    /// <summary>
    /// Otherwise it's a byte buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BufValue {
      get { return valueCase_ == ValueOneofCase.BufValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.BufValue;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState state_ = global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState.StatePrebind;
    /// <summary>
    /// The state in which the option will be applied. When used in BindConfig
    /// STATE_PREBIND is currently the only valid value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      IntValue = 4,
      BufValue = 5,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocketOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocketOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (Level != other.Level) return false;
      if (Name != other.Name) return false;
      if (IntValue != other.IntValue) return false;
      if (BufValue != other.BufValue) return false;
      if (State != other.State) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Level != 0L) hash ^= Level.GetHashCode();
      if (Name != 0L) hash ^= Name.GetHashCode();
      if (valueCase_ == ValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BufValue) hash ^= BufValue.GetHashCode();
      if (State != global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState.StatePrebind) hash ^= State.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (Level != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Level);
      }
      if (Name != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Name);
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        output.WriteRawTag(32);
        output.WriteInt64(IntValue);
      }
      if (valueCase_ == ValueOneofCase.BufValue) {
        output.WriteRawTag(42);
        output.WriteBytes(BufValue);
      }
      if (State != global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState.StatePrebind) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Level != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Level);
      }
      if (Name != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Name);
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
      }
      if (valueCase_ == ValueOneofCase.BufValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BufValue);
      }
      if (State != global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState.StatePrebind) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocketOption other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Level != 0L) {
        Level = other.Level;
      }
      if (other.Name != 0L) {
        Name = other.Name;
      }
      if (other.State != global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState.StatePrebind) {
        State = other.State;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueOneofCase.BufValue:
          BufValue = other.BufValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt64();
            break;
          }
          case 24: {
            Name = input.ReadInt64();
            break;
          }
          case 32: {
            IntValue = input.ReadInt64();
            break;
          }
          case 42: {
            BufValue = input.ReadBytes();
            break;
          }
          case 48: {
            State = (global::Envoy.Api.V3Alpha.Core.SocketOption.Types.SocketState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SocketOption message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SocketState {
        /// <summary>
        /// Socket options are applied after socket creation but before binding the socket to a port
        /// </summary>
        [pbr::OriginalName("STATE_PREBIND")] StatePrebind = 0,
        /// <summary>
        /// Socket options are applied after binding the socket to a port but before calling listen()
        /// </summary>
        [pbr::OriginalName("STATE_BOUND")] StateBound = 1,
        /// <summary>
        /// Socket options are applied after calling listen()
        /// </summary>
        [pbr::OriginalName("STATE_LISTENING")] StateListening = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Runtime derived FractionalPercent with defaults for when the numerator or denominator is not
  /// specified via a runtime key.
  /// </summary>
  public sealed partial class RuntimeFractionalPercent : pb::IMessage<RuntimeFractionalPercent> {
    private static readonly pb::MessageParser<RuntimeFractionalPercent> _parser = new pb::MessageParser<RuntimeFractionalPercent>(() => new RuntimeFractionalPercent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuntimeFractionalPercent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFractionalPercent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFractionalPercent(RuntimeFractionalPercent other) : this() {
      defaultValue_ = other.defaultValue_ != null ? other.defaultValue_.Clone() : null;
      runtimeKey_ = other.runtimeKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFractionalPercent Clone() {
      return new RuntimeFractionalPercent(this);
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 1;
    private global::Envoy.Type.FractionalPercent defaultValue_;
    /// <summary>
    /// Default value if the runtime value's for the numerator/denominator keys are not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Type.FractionalPercent DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = value;
      }
    }

    /// <summary>Field number for the "runtime_key" field.</summary>
    public const int RuntimeKeyFieldNumber = 2;
    private string runtimeKey_ = "";
    /// <summary>
    /// Runtime key for a YAML representation of a FractionalPercent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeKey {
      get { return runtimeKey_; }
      set {
        runtimeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuntimeFractionalPercent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuntimeFractionalPercent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DefaultValue, other.DefaultValue)) return false;
      if (RuntimeKey != other.RuntimeKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (defaultValue_ != null) hash ^= DefaultValue.GetHashCode();
      if (RuntimeKey.Length != 0) hash ^= RuntimeKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (defaultValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DefaultValue);
      }
      if (RuntimeKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RuntimeKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (defaultValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultValue);
      }
      if (RuntimeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuntimeFractionalPercent other) {
      if (other == null) {
        return;
      }
      if (other.defaultValue_ != null) {
        if (defaultValue_ == null) {
          DefaultValue = new global::Envoy.Type.FractionalPercent();
        }
        DefaultValue.MergeFrom(other.DefaultValue);
      }
      if (other.RuntimeKey.Length != 0) {
        RuntimeKey = other.RuntimeKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (defaultValue_ == null) {
              DefaultValue = new global::Envoy.Type.FractionalPercent();
            }
            input.ReadMessage(DefaultValue);
            break;
          }
          case 18: {
            RuntimeKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Identifies a specific ControlPlane instance that Envoy is connected to.
  /// </summary>
  public sealed partial class ControlPlane : pb::IMessage<ControlPlane> {
    private static readonly pb::MessageParser<ControlPlane> _parser = new pb::MessageParser<ControlPlane>(() => new ControlPlane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControlPlane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlPlane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlPlane(ControlPlane other) : this() {
      identifier_ = other.identifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControlPlane Clone() {
      return new ControlPlane(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private string identifier_ = "";
    /// <summary>
    /// An opaque control plane identifier that uniquely identifies an instance
    /// of control plane. This can be used to identify which control plane instance,
    /// the Envoy is connected to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControlPlane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControlPlane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Identifier != other.Identifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Identifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Identifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControlPlane other) {
      if (other == null) {
        return;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Identifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
