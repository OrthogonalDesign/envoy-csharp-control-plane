// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/api/v3alpha/listener/listener.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V3Alpha.ListenerNS {

  /// <summary>Holder for reflection information generated from envoy/api/v3alpha/listener/listener.proto</summary>
  public static partial class ListenerReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/api/v3alpha/listener/listener.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ListenerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CillbnZveS9hcGkvdjNhbHBoYS9saXN0ZW5lci9saXN0ZW5lci5wcm90bxIa",
            "ZW52b3kuYXBpLnYzYWxwaGEubGlzdGVuZXIaJGVudm95L2FwaS92M2FscGhh",
            "L2NvcmUvYWRkcmVzcy5wcm90bxohZW52b3kvYXBpL3YzYWxwaGEvYXV0aC9j",
            "ZXJ0LnByb3RvGiFlbnZveS9hcGkvdjNhbHBoYS9jb3JlL2Jhc2UucHJvdG8a",
            "GWdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8aHGdvb2dsZS9wcm90b2J1Zi9z",
            "dHJ1Y3QucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxoX",
            "dmFsaWRhdGUvdmFsaWRhdGUucHJvdG8ijwEKBkZpbHRlchIXCgRuYW1lGAEg",
            "ASgJQgm66cADBHICIAESKQoGY29uZmlnGAIgASgLMhcuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cnVjdEgAEiwKDHR5cGVkX2NvbmZpZxgEIAEoCzIULmdvb2dsZS5w",
            "cm90b2J1Zi5BbnlIAEINCgtjb25maWdfdHlwZUoECAMQBCLKBAoQRmlsdGVy",
            "Q2hhaW5NYXRjaBJFChBkZXN0aW5hdGlvbl9wb3J0GAggASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlVJbnQzMlZhbHVlQg266cADCCoGGP//AygBEjgKDXByZWZp",
            "eF9yYW5nZXMYAyADKAsyIS5lbnZveS5hcGkudjNhbHBoYS5jb3JlLkNpZHJS",
            "YW5nZRIWCg5hZGRyZXNzX3N1ZmZpeBgEIAEoCRIwCgpzdWZmaXhfbGVuGAUg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEmIKC3NvdXJjZV90",
            "eXBlGAwgASgOMkEuZW52b3kuYXBpLnYzYWxwaGEubGlzdGVuZXIuRmlsdGVy",
            "Q2hhaW5NYXRjaC5Db25uZWN0aW9uU291cmNlVHlwZUIKuunAAwWCAQIQARI/",
            "ChRzb3VyY2VfcHJlZml4X3JhbmdlcxgGIAMoCzIhLmVudm95LmFwaS52M2Fs",
            "cGhhLmNvcmUuQ2lkclJhbmdlEigKDHNvdXJjZV9wb3J0cxgHIAMoDUISuunA",
            "Aw2SAQoiCCoGGP//AygBEhQKDHNlcnZlcl9uYW1lcxgLIAMoCRIaChJ0cmFu",
            "c3BvcnRfcHJvdG9jb2wYCSABKAkSHQoVYXBwbGljYXRpb25fcHJvdG9jb2xz",
            "GAogAygJIjgKFENvbm5lY3Rpb25Tb3VyY2VUeXBlEgcKA0FOWRAAEgkKBUxP",
            "Q0FMEAESDAoIRVhURVJOQUwQAkoECAEQAlILc25pX2RvbWFpbnMiiQMKC0Zp",
            "bHRlckNoYWluEkgKEmZpbHRlcl9jaGFpbl9tYXRjaBgBIAEoCzIsLmVudm95",
            "LmFwaS52M2FscGhhLmxpc3RlbmVyLkZpbHRlckNoYWluTWF0Y2gSQQoLdGxz",
            "X2NvbnRleHQYAiABKAsyLC5lbnZveS5hcGkudjNhbHBoYS5hdXRoLkRvd25z",
            "dHJlYW1UbHNDb250ZXh0EjMKB2ZpbHRlcnMYAyADKAsyIi5lbnZveS5hcGku",
            "djNhbHBoYS5saXN0ZW5lci5GaWx0ZXISMwoPdXNlX3Byb3h5X3Byb3RvGAQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIyCghtZXRhZGF0YRgF",
            "IAEoCzIgLmVudm95LmFwaS52M2FscGhhLmNvcmUuTWV0YWRhdGESQQoQdHJh",
            "bnNwb3J0X3NvY2tldBgGIAEoCzInLmVudm95LmFwaS52M2FscGhhLmNvcmUu",
            "VHJhbnNwb3J0U29ja2V0EgwKBG5hbWUYByABKAkikQEKDkxpc3RlbmVyRmls",
            "dGVyEhcKBG5hbWUYASABKAlCCbrpwAMEcgIgARIpCgZjb25maWcYAiABKAsy",
            "Fy5nb29nbGUucHJvdG9idWYuU3RydWN0SAASLAoMdHlwZWRfY29uZmlnGAMg",
            "ASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUgAQg0KC2NvbmZpZ190eXBlQncK",
            "KGlvLmVudm95cHJveHkuZW52b3kuYXBpLnYzYWxwaGEubGlzdGVuZXJCDUxp",
            "c3RlbmVyUHJvdG9QAaoCHEVudm95LkFwaS5WM0FscGhhLkxpc3RlbmVyTlPq",
            "AhpFbnZveTo6QXBpOjpWMjo6TGlzdGVuZXJOU2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V3Alpha.Core.AddressReflection.Descriptor, global::Envoy.Api.V3Alpha.Auth.CertReflection.Descriptor, global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.ListenerNS.Filter), global::Envoy.Api.V3Alpha.ListenerNS.Filter.Parser, new[]{ "Name", "Config", "TypedConfig" }, new[]{ "ConfigType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch), global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Parser, new[]{ "DestinationPort", "PrefixRanges", "AddressSuffix", "SuffixLen", "SourceType", "SourcePrefixRanges", "SourcePorts", "ServerNames", "TransportProtocol", "ApplicationProtocols" }, null, new[]{ typeof(global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.ListenerNS.FilterChain), global::Envoy.Api.V3Alpha.ListenerNS.FilterChain.Parser, new[]{ "FilterChainMatch", "TlsContext", "Filters", "UseProxyProto", "Metadata", "TransportSocket", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V3Alpha.ListenerNS.ListenerFilter), global::Envoy.Api.V3Alpha.ListenerNS.ListenerFilter.Parser, new[]{ "Name", "Config", "TypedConfig" }, new[]{ "ConfigType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.ListenerNS.ListenerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      name_ = other.name_;
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          Config = other.Config.Clone();
          break;
        case ConfigTypeOneofCase.TypedConfig:
          TypedConfig = other.TypedConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the filter to instantiate. The name must match a
    /// :ref:`supported filter &lt;config_network_filters>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return configTypeCase_ == ConfigTypeOneofCase.Config ? (global::Google.Protobuf.WellKnownTypes.Struct) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.Config;
      }
    }

    /// <summary>Field number for the "typed_config" field.</summary>
    public const int TypedConfigFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TypedConfig {
      get { return configTypeCase_ == ConfigTypeOneofCase.TypedConfig ? (global::Google.Protobuf.WellKnownTypes.Any) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.TypedConfig;
      }
    }

    private object configType_;
    /// <summary>Enum of possible cases for the "config_type" oneof.</summary>
    public enum ConfigTypeOneofCase {
      None = 0,
      Config = 2,
      TypedConfig = 4,
    }
    private ConfigTypeOneofCase configTypeCase_ = ConfigTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTypeOneofCase ConfigTypeCase {
      get { return configTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfigType() {
      configTypeCase_ = ConfigTypeOneofCase.None;
      configType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(TypedConfig, other.TypedConfig)) return false;
      if (ConfigTypeCase != other.ConfigTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.Config) hash ^= Config.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) hash ^= TypedConfig.GetHashCode();
      hash ^= (int) configTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        output.WriteRawTag(34);
        output.WriteMessage(TypedConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypedConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          if (Config == null) {
            Config = new global::Google.Protobuf.WellKnownTypes.Struct();
          }
          Config.MergeFrom(other.Config);
          break;
        case ConfigTypeOneofCase.TypedConfig:
          if (TypedConfig == null) {
            TypedConfig = new global::Google.Protobuf.WellKnownTypes.Any();
          }
          TypedConfig.MergeFrom(other.TypedConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Struct subBuilder = new global::Google.Protobuf.WellKnownTypes.Struct();
            if (configTypeCase_ == ConfigTypeOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
              subBuilder.MergeFrom(TypedConfig);
            }
            input.ReadMessage(subBuilder);
            TypedConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies the match criteria for selecting a specific filter chain for a
  /// listener.
  ///
  /// In order for a filter chain to be selected, *ALL* of its criteria must be
  /// fulfilled by the incoming connection, properties of which are set by the
  /// networking stack and/or listener filters.
  ///
  /// The following order applies:
  ///
  /// 1. Destination port.
  /// 2. Destination IP address.
  /// 3. Server name (e.g. SNI for TLS protocol),
  /// 4. Transport protocol.
  /// 5. Application protocols (e.g. ALPN for TLS protocol).
  /// 6. Source type (e.g. any, local or external network).
  /// 7. Source IP address.
  /// 8. Source port.
  ///
  /// For criteria that allow ranges or wildcards, the most specific value in any
  /// of the configured filter chains that matches the incoming connection is going
  /// to be used (e.g. for SNI ``www.example.com`` the most specific match would be
  /// ``www.example.com``, then ``*.example.com``, then ``*.com``, then any filter
  /// chain without ``server_names`` requirements).
  ///
  /// [#comment: Implemented rules are kept in the preference order, with deprecated fields
  /// listed at the end, because that's how we want to list them in the docs.
  ///
  /// [#comment:TODO(PiotrSikora): Add support for configurable precedence of the rules]
  /// </summary>
  public sealed partial class FilterChainMatch : pb::IMessage<FilterChainMatch> {
    private static readonly pb::MessageParser<FilterChainMatch> _parser = new pb::MessageParser<FilterChainMatch>(() => new FilterChainMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterChainMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.ListenerNS.ListenerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChainMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChainMatch(FilterChainMatch other) : this() {
      DestinationPort = other.DestinationPort;
      prefixRanges_ = other.prefixRanges_.Clone();
      addressSuffix_ = other.addressSuffix_;
      SuffixLen = other.SuffixLen;
      sourceType_ = other.sourceType_;
      sourcePrefixRanges_ = other.sourcePrefixRanges_.Clone();
      sourcePorts_ = other.sourcePorts_.Clone();
      serverNames_ = other.serverNames_.Clone();
      transportProtocol_ = other.transportProtocol_;
      applicationProtocols_ = other.applicationProtocols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChainMatch Clone() {
      return new FilterChainMatch(this);
    }

    /// <summary>Field number for the "destination_port" field.</summary>
    public const int DestinationPortFieldNumber = 8;
    private static readonly pb::FieldCodec<uint?> _single_destinationPort_codec = pb::FieldCodec.ForStructWrapper<uint>(66);
    private uint? destinationPort_;
    /// <summary>
    /// Optional destination port to consider when use_original_dst is set on the
    /// listener in determining a filter chain match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? DestinationPort {
      get { return destinationPort_; }
      set {
        destinationPort_ = value;
      }
    }


    /// <summary>Field number for the "prefix_ranges" field.</summary>
    public const int PrefixRangesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.Core.CidrRange> _repeated_prefixRanges_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Api.V3Alpha.Core.CidrRange.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> prefixRanges_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange>();
    /// <summary>
    /// If non-empty, an IP address and prefix length to match addresses when the
    /// listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> PrefixRanges {
      get { return prefixRanges_; }
    }

    /// <summary>Field number for the "address_suffix" field.</summary>
    public const int AddressSuffixFieldNumber = 4;
    private string addressSuffix_ = "";
    /// <summary>
    /// If non-empty, an IP address and suffix length to match addresses when the
    /// listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressSuffix {
      get { return addressSuffix_; }
      set {
        addressSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suffix_len" field.</summary>
    public const int SuffixLenFieldNumber = 5;
    private static readonly pb::FieldCodec<uint?> _single_suffixLen_codec = pb::FieldCodec.ForStructWrapper<uint>(42);
    private uint? suffixLen_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? SuffixLen {
      get { return suffixLen_; }
      set {
        suffixLen_ = value;
      }
    }


    /// <summary>Field number for the "source_type" field.</summary>
    public const int SourceTypeFieldNumber = 12;
    private global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType sourceType_ = global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType.Any;
    /// <summary>
    /// Specifies the connection source IP match type. Can be any, local or external network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType SourceType {
      get { return sourceType_; }
      set {
        sourceType_ = value;
      }
    }

    /// <summary>Field number for the "source_prefix_ranges" field.</summary>
    public const int SourcePrefixRangesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.Core.CidrRange> _repeated_sourcePrefixRanges_codec
        = pb::FieldCodec.ForMessage(50, global::Envoy.Api.V3Alpha.Core.CidrRange.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> sourcePrefixRanges_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange>();
    /// <summary>
    /// The criteria is satisfied if the source IP address of the downstream
    /// connection is contained in at least one of the specified subnets. If the
    /// parameter is not specified or the list is empty, the source IP address is
    /// ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> SourcePrefixRanges {
      get { return sourcePrefixRanges_; }
    }

    /// <summary>Field number for the "source_ports" field.</summary>
    public const int SourcePortsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_sourcePorts_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> sourcePorts_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// The criteria is satisfied if the source port of the downstream connection
    /// is contained in at least one of the specified ports. If the parameter is
    /// not specified, the source port is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SourcePorts {
      get { return sourcePorts_; }
    }

    /// <summary>Field number for the "server_names" field.</summary>
    public const int ServerNamesFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_serverNames_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> serverNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining
    /// a filter chain match. Those values will be compared against the server names of a new
    /// connection, when detected by one of the listener filters.
    ///
    /// The server name will be matched against all wildcard domains, i.e. ``www.example.com``
    /// will be first matched against ``www.example.com``, then ``*.example.com``, then ``*.com``.
    ///
    /// Note that partial wildcards are not supported, and values like ``*w.example.com`` are invalid.
    ///
    /// .. attention::
    ///
    ///   See the :ref:`FAQ entry &lt;faq_how_to_setup_sni>` on how to configure SNI for more
    ///   information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerNames {
      get { return serverNames_; }
    }

    /// <summary>Field number for the "transport_protocol" field.</summary>
    public const int TransportProtocolFieldNumber = 9;
    private string transportProtocol_ = "";
    /// <summary>
    /// If non-empty, a transport protocol to consider when determining a filter chain match.
    /// This value will be compared against the transport protocol of a new connection, when
    /// it's detected by one of the listener filters.
    ///
    /// Suggested values include:
    ///
    /// * ``raw_buffer`` - default, used when no transport protocol is detected,
    /// * ``tls`` - set by :ref:`envoy.listener.tls_inspector &lt;config_listener_filters_tls_inspector>`
    ///   when TLS protocol is detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransportProtocol {
      get { return transportProtocol_; }
      set {
        transportProtocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "application_protocols" field.</summary>
    public const int ApplicationProtocolsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_applicationProtocols_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> applicationProtocols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If non-empty, a list of application protocols (e.g. ALPN for TLS protocol) to consider when
    /// determining a filter chain match. Those values will be compared against the application
    /// protocols of a new connection, when detected by one of the listener filters.
    ///
    /// Suggested values include:
    ///
    /// * ``http/1.1`` - set by :ref:`envoy.listener.tls_inspector
    ///   &lt;config_listener_filters_tls_inspector>`,
    /// * ``h2`` - set by :ref:`envoy.listener.tls_inspector &lt;config_listener_filters_tls_inspector>`
    ///
    /// .. attention::
    ///
    ///   Currently, only :ref:`TLS Inspector &lt;config_listener_filters_tls_inspector>` provides
    ///   application protocol detection based on the requested
    ///   `ALPN &lt;https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_ values.
    ///
    ///   However, the use of ALPN is pretty much limited to the HTTP/2 traffic on the Internet,
    ///   and matching on values other than ``h2`` is going to lead to a lot of false negatives,
    ///   unless all connecting clients are known to use ALPN.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ApplicationProtocols {
      get { return applicationProtocols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterChainMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterChainMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestinationPort != other.DestinationPort) return false;
      if(!prefixRanges_.Equals(other.prefixRanges_)) return false;
      if (AddressSuffix != other.AddressSuffix) return false;
      if (SuffixLen != other.SuffixLen) return false;
      if (SourceType != other.SourceType) return false;
      if(!sourcePrefixRanges_.Equals(other.sourcePrefixRanges_)) return false;
      if(!sourcePorts_.Equals(other.sourcePorts_)) return false;
      if(!serverNames_.Equals(other.serverNames_)) return false;
      if (TransportProtocol != other.TransportProtocol) return false;
      if(!applicationProtocols_.Equals(other.applicationProtocols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (destinationPort_ != null) hash ^= DestinationPort.GetHashCode();
      hash ^= prefixRanges_.GetHashCode();
      if (AddressSuffix.Length != 0) hash ^= AddressSuffix.GetHashCode();
      if (suffixLen_ != null) hash ^= SuffixLen.GetHashCode();
      if (SourceType != global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType.Any) hash ^= SourceType.GetHashCode();
      hash ^= sourcePrefixRanges_.GetHashCode();
      hash ^= sourcePorts_.GetHashCode();
      hash ^= serverNames_.GetHashCode();
      if (TransportProtocol.Length != 0) hash ^= TransportProtocol.GetHashCode();
      hash ^= applicationProtocols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      prefixRanges_.WriteTo(output, _repeated_prefixRanges_codec);
      if (AddressSuffix.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AddressSuffix);
      }
      if (suffixLen_ != null) {
        _single_suffixLen_codec.WriteTagAndValue(output, SuffixLen);
      }
      sourcePrefixRanges_.WriteTo(output, _repeated_sourcePrefixRanges_codec);
      sourcePorts_.WriteTo(output, _repeated_sourcePorts_codec);
      if (destinationPort_ != null) {
        _single_destinationPort_codec.WriteTagAndValue(output, DestinationPort);
      }
      if (TransportProtocol.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TransportProtocol);
      }
      applicationProtocols_.WriteTo(output, _repeated_applicationProtocols_codec);
      serverNames_.WriteTo(output, _repeated_serverNames_codec);
      if (SourceType != global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType.Any) {
        output.WriteRawTag(96);
        output.WriteEnum((int) SourceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (destinationPort_ != null) {
        size += _single_destinationPort_codec.CalculateSizeWithTag(DestinationPort);
      }
      size += prefixRanges_.CalculateSize(_repeated_prefixRanges_codec);
      if (AddressSuffix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressSuffix);
      }
      if (suffixLen_ != null) {
        size += _single_suffixLen_codec.CalculateSizeWithTag(SuffixLen);
      }
      if (SourceType != global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType.Any) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SourceType);
      }
      size += sourcePrefixRanges_.CalculateSize(_repeated_sourcePrefixRanges_codec);
      size += sourcePorts_.CalculateSize(_repeated_sourcePorts_codec);
      size += serverNames_.CalculateSize(_repeated_serverNames_codec);
      if (TransportProtocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransportProtocol);
      }
      size += applicationProtocols_.CalculateSize(_repeated_applicationProtocols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterChainMatch other) {
      if (other == null) {
        return;
      }
      if (other.destinationPort_ != null) {
        if (destinationPort_ == null || other.DestinationPort != 0) {
          DestinationPort = other.DestinationPort;
        }
      }
      prefixRanges_.Add(other.prefixRanges_);
      if (other.AddressSuffix.Length != 0) {
        AddressSuffix = other.AddressSuffix;
      }
      if (other.suffixLen_ != null) {
        if (suffixLen_ == null || other.SuffixLen != 0) {
          SuffixLen = other.SuffixLen;
        }
      }
      if (other.SourceType != global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType.Any) {
        SourceType = other.SourceType;
      }
      sourcePrefixRanges_.Add(other.sourcePrefixRanges_);
      sourcePorts_.Add(other.sourcePorts_);
      serverNames_.Add(other.serverNames_);
      if (other.TransportProtocol.Length != 0) {
        TransportProtocol = other.TransportProtocol;
      }
      applicationProtocols_.Add(other.applicationProtocols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            prefixRanges_.AddEntriesFrom(input, _repeated_prefixRanges_codec);
            break;
          }
          case 34: {
            AddressSuffix = input.ReadString();
            break;
          }
          case 42: {
            uint? value = _single_suffixLen_codec.Read(input);
            if (suffixLen_ == null || value != 0) {
              SuffixLen = value;
            }
            break;
          }
          case 50: {
            sourcePrefixRanges_.AddEntriesFrom(input, _repeated_sourcePrefixRanges_codec);
            break;
          }
          case 58:
          case 56: {
            sourcePorts_.AddEntriesFrom(input, _repeated_sourcePorts_codec);
            break;
          }
          case 66: {
            uint? value = _single_destinationPort_codec.Read(input);
            if (destinationPort_ == null || value != 0) {
              DestinationPort = value;
            }
            break;
          }
          case 74: {
            TransportProtocol = input.ReadString();
            break;
          }
          case 82: {
            applicationProtocols_.AddEntriesFrom(input, _repeated_applicationProtocols_codec);
            break;
          }
          case 90: {
            serverNames_.AddEntriesFrom(input, _repeated_serverNames_codec);
            break;
          }
          case 96: {
            SourceType = (global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch.Types.ConnectionSourceType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FilterChainMatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ConnectionSourceType {
        /// <summary>
        /// Any connection source matches.
        /// </summary>
        [pbr::OriginalName("ANY")] Any = 0,
        /// <summary>
        /// Match a connection originating from the same host.
        /// </summary>
        [pbr::OriginalName("LOCAL")] Local = 1,
        /// <summary>
        /// Match a connection originating from a different host.
        /// </summary>
        [pbr::OriginalName("EXTERNAL")] External = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A filter chain wraps a set of match criteria, an option TLS context, a set of filters, and
  /// various other parameters.
  /// </summary>
  public sealed partial class FilterChain : pb::IMessage<FilterChain> {
    private static readonly pb::MessageParser<FilterChain> _parser = new pb::MessageParser<FilterChain>(() => new FilterChain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterChain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.ListenerNS.ListenerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChain(FilterChain other) : this() {
      filterChainMatch_ = other.filterChainMatch_ != null ? other.filterChainMatch_.Clone() : null;
      tlsContext_ = other.tlsContext_ != null ? other.tlsContext_.Clone() : null;
      filters_ = other.filters_.Clone();
      UseProxyProto = other.UseProxyProto;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      transportSocket_ = other.transportSocket_ != null ? other.transportSocket_.Clone() : null;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterChain Clone() {
      return new FilterChain(this);
    }

    /// <summary>Field number for the "filter_chain_match" field.</summary>
    public const int FilterChainMatchFieldNumber = 1;
    private global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch filterChainMatch_;
    /// <summary>
    /// The criteria to use when matching a connection to this filter chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch FilterChainMatch {
      get { return filterChainMatch_; }
      set {
        filterChainMatch_ = value;
      }
    }

    /// <summary>Field number for the "tls_context" field.</summary>
    public const int TlsContextFieldNumber = 2;
    private global::Envoy.Api.V3Alpha.Auth.DownstreamTlsContext tlsContext_;
    /// <summary>
    /// The TLS context for this filter chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Auth.DownstreamTlsContext TlsContext {
      get { return tlsContext_; }
      set {
        tlsContext_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.ListenerNS.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Api.V3Alpha.ListenerNS.Filter.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.ListenerNS.Filter> filters_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.ListenerNS.Filter>();
    /// <summary>
    /// A list of individual network filters that make up the filter chain for
    /// connections established with the listener. Order matters as the filters are
    /// processed sequentially as connection events happen. Note: If the filter
    /// list is empty, the connection will close by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V3Alpha.ListenerNS.Filter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "use_proxy_proto" field.</summary>
    public const int UseProxyProtoFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_useProxyProto_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? useProxyProto_;
    /// <summary>
    /// Whether the listener should expect a PROXY protocol V1 header on new
    /// connections. If this option is enabled, the listener will assume that that
    /// remote address of the connection is the one specified in the header. Some
    /// load balancers including the AWS ELB support this option. If the option is
    /// absent or set to false, Envoy will use the physical peer address of the
    /// connection as the remote address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? UseProxyProto {
      get { return useProxyProto_; }
      set {
        useProxyProto_ = value;
      }
    }


    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private global::Envoy.Api.V3Alpha.Core.Metadata metadata_;
    /// <summary>
    /// [#not-implemented-hide:] filter chain metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "transport_socket" field.</summary>
    public const int TransportSocketFieldNumber = 6;
    private global::Envoy.Api.V3Alpha.Core.TransportSocket transportSocket_;
    /// <summary>
    /// See :ref:`base.TransportSocket&lt;envoy_api_msg_core.TransportSocket>` description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.TransportSocket TransportSocket {
      get { return transportSocket_; }
      set {
        transportSocket_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    /// [#not-implemented-hide:] The unique name (or empty) by which this filter chain is known. If no
    /// name is provided, Envoy will allocate an internal UUID for the filter chain. If the filter
    /// chain is to be dynamically updated or removed via FCDS a unique name must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterChain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterChain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FilterChainMatch, other.FilterChainMatch)) return false;
      if (!object.Equals(TlsContext, other.TlsContext)) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (UseProxyProto != other.UseProxyProto) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(TransportSocket, other.TransportSocket)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filterChainMatch_ != null) hash ^= FilterChainMatch.GetHashCode();
      if (tlsContext_ != null) hash ^= TlsContext.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (useProxyProto_ != null) hash ^= UseProxyProto.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (transportSocket_ != null) hash ^= TransportSocket.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filterChainMatch_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FilterChainMatch);
      }
      if (tlsContext_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TlsContext);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (useProxyProto_ != null) {
        _single_useProxyProto_codec.WriteTagAndValue(output, UseProxyProto);
      }
      if (metadata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metadata);
      }
      if (transportSocket_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TransportSocket);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filterChainMatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterChainMatch);
      }
      if (tlsContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TlsContext);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (useProxyProto_ != null) {
        size += _single_useProxyProto_codec.CalculateSizeWithTag(UseProxyProto);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (transportSocket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportSocket);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterChain other) {
      if (other == null) {
        return;
      }
      if (other.filterChainMatch_ != null) {
        if (filterChainMatch_ == null) {
          FilterChainMatch = new global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch();
        }
        FilterChainMatch.MergeFrom(other.FilterChainMatch);
      }
      if (other.tlsContext_ != null) {
        if (tlsContext_ == null) {
          TlsContext = new global::Envoy.Api.V3Alpha.Auth.DownstreamTlsContext();
        }
        TlsContext.MergeFrom(other.TlsContext);
      }
      filters_.Add(other.filters_);
      if (other.useProxyProto_ != null) {
        if (useProxyProto_ == null || other.UseProxyProto != false) {
          UseProxyProto = other.UseProxyProto;
        }
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Envoy.Api.V3Alpha.Core.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.transportSocket_ != null) {
        if (transportSocket_ == null) {
          TransportSocket = new global::Envoy.Api.V3Alpha.Core.TransportSocket();
        }
        TransportSocket.MergeFrom(other.TransportSocket);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (filterChainMatch_ == null) {
              FilterChainMatch = new global::Envoy.Api.V3Alpha.ListenerNS.FilterChainMatch();
            }
            input.ReadMessage(FilterChainMatch);
            break;
          }
          case 18: {
            if (tlsContext_ == null) {
              TlsContext = new global::Envoy.Api.V3Alpha.Auth.DownstreamTlsContext();
            }
            input.ReadMessage(TlsContext);
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 34: {
            bool? value = _single_useProxyProto_codec.Read(input);
            if (useProxyProto_ == null || value != false) {
              UseProxyProto = value;
            }
            break;
          }
          case 42: {
            if (metadata_ == null) {
              Metadata = new global::Envoy.Api.V3Alpha.Core.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 50: {
            if (transportSocket_ == null) {
              TransportSocket = new global::Envoy.Api.V3Alpha.Core.TransportSocket();
            }
            input.ReadMessage(TransportSocket);
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListenerFilter : pb::IMessage<ListenerFilter> {
    private static readonly pb::MessageParser<ListenerFilter> _parser = new pb::MessageParser<ListenerFilter>(() => new ListenerFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListenerFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V3Alpha.ListenerNS.ListenerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenerFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenerFilter(ListenerFilter other) : this() {
      name_ = other.name_;
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          Config = other.Config.Clone();
          break;
        case ConfigTypeOneofCase.TypedConfig:
          TypedConfig = other.TypedConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListenerFilter Clone() {
      return new ListenerFilter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the filter to instantiate. The name must match a
    /// :ref:`supported filter &lt;config_listener_filters>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return configTypeCase_ == ConfigTypeOneofCase.Config ? (global::Google.Protobuf.WellKnownTypes.Struct) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.Config;
      }
    }

    /// <summary>Field number for the "typed_config" field.</summary>
    public const int TypedConfigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TypedConfig {
      get { return configTypeCase_ == ConfigTypeOneofCase.TypedConfig ? (global::Google.Protobuf.WellKnownTypes.Any) configType_ : null; }
      set {
        configType_ = value;
        configTypeCase_ = value == null ? ConfigTypeOneofCase.None : ConfigTypeOneofCase.TypedConfig;
      }
    }

    private object configType_;
    /// <summary>Enum of possible cases for the "config_type" oneof.</summary>
    public enum ConfigTypeOneofCase {
      None = 0,
      Config = 2,
      TypedConfig = 3,
    }
    private ConfigTypeOneofCase configTypeCase_ = ConfigTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTypeOneofCase ConfigTypeCase {
      get { return configTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfigType() {
      configTypeCase_ = ConfigTypeOneofCase.None;
      configType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListenerFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListenerFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(TypedConfig, other.TypedConfig)) return false;
      if (ConfigTypeCase != other.ConfigTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.Config) hash ^= Config.GetHashCode();
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) hash ^= TypedConfig.GetHashCode();
      hash ^= (int) configTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        output.WriteRawTag(26);
        output.WriteMessage(TypedConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypedConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListenerFilter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.ConfigTypeCase) {
        case ConfigTypeOneofCase.Config:
          if (Config == null) {
            Config = new global::Google.Protobuf.WellKnownTypes.Struct();
          }
          Config.MergeFrom(other.Config);
          break;
        case ConfigTypeOneofCase.TypedConfig:
          if (TypedConfig == null) {
            TypedConfig = new global::Google.Protobuf.WellKnownTypes.Any();
          }
          TypedConfig.MergeFrom(other.TypedConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Struct subBuilder = new global::Google.Protobuf.WellKnownTypes.Struct();
            if (configTypeCase_ == ConfigTypeOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 26: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (configTypeCase_ == ConfigTypeOneofCase.TypedConfig) {
              subBuilder.MergeFrom(TypedConfig);
            }
            input.ReadMessage(subBuilder);
            TypedConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
