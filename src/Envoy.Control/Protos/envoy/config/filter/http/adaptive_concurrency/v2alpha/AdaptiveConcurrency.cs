// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha {

  /// <summary>Holder for reflection information generated from envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto</summary>
  public static partial class AdaptiveConcurrencyReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/http/adaptive_concurrency/v2alpha/adaptive_concurrency.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdaptiveConcurrencyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ClBlbnZveS9jb25maWcvZmlsdGVyL2h0dHAvYWRhcHRpdmVfY29uY3VycmVu",
            "Y3kvdjJhbHBoYS9hZGFwdGl2ZV9jb25jdXJyZW5jeS5wcm90bxI1ZW52b3ku",
            "Y29uZmlnLmZpbHRlci5odHRwLmFkYXB0aXZlX2NvbmN1cnJlbmN5LnYyYWxw",
            "aGEaGGVudm95L3R5cGUvcGVyY2VudC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVm",
            "L2R1cmF0aW9uLnByb3RvGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnByb3Rv",
            "Gh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aF3ZhbGlkYXRlL3Zh",
            "bGlkYXRlLnByb3RvIqoGChhHcmFkaWVudENvbnRyb2xsZXJDb25maWcSOAob",
            "c2FtcGxlX2FnZ3JlZ2F0ZV9wZXJjZW50aWxlGAEgASgLMhMuZW52b3kudHlw",
            "ZS5QZXJjZW50Ep8BChhjb25jdXJyZW5jeV9saW1pdF9wYXJhbXMYAiABKAsy",
            "cS5lbnZveS5jb25maWcuZmlsdGVyLmh0dHAuYWRhcHRpdmVfY29uY3VycmVu",
            "Y3kudjJhbHBoYS5HcmFkaWVudENvbnRyb2xsZXJDb25maWcuQ29uY3VycmVu",
            "Y3lMaW1pdENhbGN1bGF0aW9uUGFyYW1zQgq66cADBYoBAhABEpQBChNtaW5f",
            "cnR0X2NhbGNfcGFyYW1zGAMgASgLMmsuZW52b3kuY29uZmlnLmZpbHRlci5o",
            "dHRwLmFkYXB0aXZlX2NvbmN1cnJlbmN5LnYyYWxwaGEuR3JhZGllbnRDb250",
            "cm9sbGVyQ29uZmlnLk1pbmltdW1SVFRDYWxjdWxhdGlvblBhcmFtc0IKuunA",
            "AwWKAQIQARr/AQohQ29uY3VycmVuY3lMaW1pdENhbGN1bGF0aW9uUGFyYW1z",
            "EkQKDG1heF9ncmFkaWVudBgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3Vi",
            "bGVWYWx1ZUIQuunAAwsSCSEAAAAAAADwPxJGChVtYXhfY29uY3VycmVuY3lf",
            "bGltaXQYAiABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWVCCbrp",
            "wAMEKgIgABJMChtjb25jdXJyZW5jeV91cGRhdGVfaW50ZXJ2YWwYAyABKAsy",
            "GS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CDLrpwAMHqgEECAEqABqYAQob",
            "TWluaW11bVJUVENhbGN1bGF0aW9uUGFyYW1zEjkKCGludGVydmFsGAEgASgL",
            "MhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgy66cADB6oBBAgBKgASPgoN",
            "cmVxdWVzdF9jb3VudBgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJW",
            "YWx1ZUIJuunAAwQqAiAAIsEBChNBZGFwdGl2ZUNvbmN1cnJlbmN5EoEBChpn",
            "cmFkaWVudF9jb250cm9sbGVyX2NvbmZpZxgBIAEoCzJPLmVudm95LmNvbmZp",
            "Zy5maWx0ZXIuaHR0cC5hZGFwdGl2ZV9jb25jdXJyZW5jeS52MmFscGhhLkdy",
            "YWRpZW50Q29udHJvbGxlckNvbmZpZ0IKuunAAwWKAQIQAUgAQiYKHWNvbmN1",
            "cnJlbmN5X2NvbnRyb2xsZXJfY29uZmlnEgW46cADAUJhCkNpby5lbnZveXBy",
            "b3h5LmVudm95LmNvbmZpZy5maWx0ZXIuaHR0cC5hZGFwdGl2ZV9jb25jdXJy",
            "ZW5jeS52MmFscGhhQhhBZGFwdGl2ZUNvbmN1cnJlbmN5UHJvdG9QAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Type.PercentReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig), global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Parser, new[]{ "SampleAggregatePercentile", "ConcurrencyLimitParams", "MinRttCalcParams" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.ConcurrencyLimitCalculationParams), global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.ConcurrencyLimitCalculationParams.Parser, new[]{ "MaxGradient", "MaxConcurrencyLimit", "ConcurrencyUpdateInterval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.MinimumRTTCalculationParams), global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.MinimumRTTCalculationParams.Parser, new[]{ "Interval", "RequestCount" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.AdaptiveConcurrency), global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.AdaptiveConcurrency.Parser, new[]{ "GradientControllerConfig" }, new[]{ "ConcurrencyControllerConfig" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Configuration parameters for the gradient controller.
  /// </summary>
  public sealed partial class GradientControllerConfig : pb::IMessage<GradientControllerConfig> {
    private static readonly pb::MessageParser<GradientControllerConfig> _parser = new pb::MessageParser<GradientControllerConfig>(() => new GradientControllerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradientControllerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.AdaptiveConcurrencyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradientControllerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradientControllerConfig(GradientControllerConfig other) : this() {
      sampleAggregatePercentile_ = other.sampleAggregatePercentile_ != null ? other.sampleAggregatePercentile_.Clone() : null;
      concurrencyLimitParams_ = other.concurrencyLimitParams_ != null ? other.concurrencyLimitParams_.Clone() : null;
      minRttCalcParams_ = other.minRttCalcParams_ != null ? other.minRttCalcParams_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradientControllerConfig Clone() {
      return new GradientControllerConfig(this);
    }

    /// <summary>Field number for the "sample_aggregate_percentile" field.</summary>
    public const int SampleAggregatePercentileFieldNumber = 1;
    private global::Envoy.Type.Percent sampleAggregatePercentile_;
    /// <summary>
    /// The percentile to use when summarizing aggregated samples. Defaults to p50.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Type.Percent SampleAggregatePercentile {
      get { return sampleAggregatePercentile_; }
      set {
        sampleAggregatePercentile_ = value;
      }
    }

    /// <summary>Field number for the "concurrency_limit_params" field.</summary>
    public const int ConcurrencyLimitParamsFieldNumber = 2;
    private global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.ConcurrencyLimitCalculationParams concurrencyLimitParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.ConcurrencyLimitCalculationParams ConcurrencyLimitParams {
      get { return concurrencyLimitParams_; }
      set {
        concurrencyLimitParams_ = value;
      }
    }

    /// <summary>Field number for the "min_rtt_calc_params" field.</summary>
    public const int MinRttCalcParamsFieldNumber = 3;
    private global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.MinimumRTTCalculationParams minRttCalcParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.MinimumRTTCalculationParams MinRttCalcParams {
      get { return minRttCalcParams_; }
      set {
        minRttCalcParams_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradientControllerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradientControllerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SampleAggregatePercentile, other.SampleAggregatePercentile)) return false;
      if (!object.Equals(ConcurrencyLimitParams, other.ConcurrencyLimitParams)) return false;
      if (!object.Equals(MinRttCalcParams, other.MinRttCalcParams)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sampleAggregatePercentile_ != null) hash ^= SampleAggregatePercentile.GetHashCode();
      if (concurrencyLimitParams_ != null) hash ^= ConcurrencyLimitParams.GetHashCode();
      if (minRttCalcParams_ != null) hash ^= MinRttCalcParams.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sampleAggregatePercentile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SampleAggregatePercentile);
      }
      if (concurrencyLimitParams_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConcurrencyLimitParams);
      }
      if (minRttCalcParams_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinRttCalcParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sampleAggregatePercentile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SampleAggregatePercentile);
      }
      if (concurrencyLimitParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConcurrencyLimitParams);
      }
      if (minRttCalcParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinRttCalcParams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradientControllerConfig other) {
      if (other == null) {
        return;
      }
      if (other.sampleAggregatePercentile_ != null) {
        if (sampleAggregatePercentile_ == null) {
          SampleAggregatePercentile = new global::Envoy.Type.Percent();
        }
        SampleAggregatePercentile.MergeFrom(other.SampleAggregatePercentile);
      }
      if (other.concurrencyLimitParams_ != null) {
        if (concurrencyLimitParams_ == null) {
          ConcurrencyLimitParams = new global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.ConcurrencyLimitCalculationParams();
        }
        ConcurrencyLimitParams.MergeFrom(other.ConcurrencyLimitParams);
      }
      if (other.minRttCalcParams_ != null) {
        if (minRttCalcParams_ == null) {
          MinRttCalcParams = new global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.MinimumRTTCalculationParams();
        }
        MinRttCalcParams.MergeFrom(other.MinRttCalcParams);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sampleAggregatePercentile_ == null) {
              SampleAggregatePercentile = new global::Envoy.Type.Percent();
            }
            input.ReadMessage(SampleAggregatePercentile);
            break;
          }
          case 18: {
            if (concurrencyLimitParams_ == null) {
              ConcurrencyLimitParams = new global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.ConcurrencyLimitCalculationParams();
            }
            input.ReadMessage(ConcurrencyLimitParams);
            break;
          }
          case 26: {
            if (minRttCalcParams_ == null) {
              MinRttCalcParams = new global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Types.MinimumRTTCalculationParams();
            }
            input.ReadMessage(MinRttCalcParams);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GradientControllerConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Parameters controlling the periodic recalculation of the concurrency limit from sampled request
      /// latencies.
      /// </summary>
      public sealed partial class ConcurrencyLimitCalculationParams : pb::IMessage<ConcurrencyLimitCalculationParams> {
        private static readonly pb::MessageParser<ConcurrencyLimitCalculationParams> _parser = new pb::MessageParser<ConcurrencyLimitCalculationParams>(() => new ConcurrencyLimitCalculationParams());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConcurrencyLimitCalculationParams> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConcurrencyLimitCalculationParams() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConcurrencyLimitCalculationParams(ConcurrencyLimitCalculationParams other) : this() {
          MaxGradient = other.MaxGradient;
          MaxConcurrencyLimit = other.MaxConcurrencyLimit;
          concurrencyUpdateInterval_ = other.concurrencyUpdateInterval_ != null ? other.concurrencyUpdateInterval_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConcurrencyLimitCalculationParams Clone() {
          return new ConcurrencyLimitCalculationParams(this);
        }

        /// <summary>Field number for the "max_gradient" field.</summary>
        public const int MaxGradientFieldNumber = 1;
        private static readonly pb::FieldCodec<double?> _single_maxGradient_codec = pb::FieldCodec.ForStructWrapper<double>(10);
        private double? maxGradient_;
        /// <summary>
        /// The maximum value the gradient is allowed to take. This influences how aggressively the
        /// concurrency limit can increase. Defaults to 2.0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double? MaxGradient {
          get { return maxGradient_; }
          set {
            maxGradient_ = value;
          }
        }


        /// <summary>Field number for the "max_concurrency_limit" field.</summary>
        public const int MaxConcurrencyLimitFieldNumber = 2;
        private static readonly pb::FieldCodec<uint?> _single_maxConcurrencyLimit_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
        private uint? maxConcurrencyLimit_;
        /// <summary>
        /// The allowed upper-bound on the calculated concurrency limit. Defaults to 1000.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint? MaxConcurrencyLimit {
          get { return maxConcurrencyLimit_; }
          set {
            maxConcurrencyLimit_ = value;
          }
        }


        /// <summary>Field number for the "concurrency_update_interval" field.</summary>
        public const int ConcurrencyUpdateIntervalFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Duration concurrencyUpdateInterval_;
        /// <summary>
        /// The period of time samples are taken to recalculate the concurrency limit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration ConcurrencyUpdateInterval {
          get { return concurrencyUpdateInterval_; }
          set {
            concurrencyUpdateInterval_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConcurrencyLimitCalculationParams);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConcurrencyLimitCalculationParams other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(MaxGradient, other.MaxGradient)) return false;
          if (MaxConcurrencyLimit != other.MaxConcurrencyLimit) return false;
          if (!object.Equals(ConcurrencyUpdateInterval, other.ConcurrencyUpdateInterval)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (maxGradient_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(MaxGradient);
          if (maxConcurrencyLimit_ != null) hash ^= MaxConcurrencyLimit.GetHashCode();
          if (concurrencyUpdateInterval_ != null) hash ^= ConcurrencyUpdateInterval.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (maxGradient_ != null) {
            _single_maxGradient_codec.WriteTagAndValue(output, MaxGradient);
          }
          if (maxConcurrencyLimit_ != null) {
            _single_maxConcurrencyLimit_codec.WriteTagAndValue(output, MaxConcurrencyLimit);
          }
          if (concurrencyUpdateInterval_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ConcurrencyUpdateInterval);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (maxGradient_ != null) {
            size += _single_maxGradient_codec.CalculateSizeWithTag(MaxGradient);
          }
          if (maxConcurrencyLimit_ != null) {
            size += _single_maxConcurrencyLimit_codec.CalculateSizeWithTag(MaxConcurrencyLimit);
          }
          if (concurrencyUpdateInterval_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConcurrencyUpdateInterval);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConcurrencyLimitCalculationParams other) {
          if (other == null) {
            return;
          }
          if (other.maxGradient_ != null) {
            if (maxGradient_ == null || other.MaxGradient != 0D) {
              MaxGradient = other.MaxGradient;
            }
          }
          if (other.maxConcurrencyLimit_ != null) {
            if (maxConcurrencyLimit_ == null || other.MaxConcurrencyLimit != 0) {
              MaxConcurrencyLimit = other.MaxConcurrencyLimit;
            }
          }
          if (other.concurrencyUpdateInterval_ != null) {
            if (concurrencyUpdateInterval_ == null) {
              ConcurrencyUpdateInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            ConcurrencyUpdateInterval.MergeFrom(other.ConcurrencyUpdateInterval);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                double? value = _single_maxGradient_codec.Read(input);
                if (maxGradient_ == null || value != 0D) {
                  MaxGradient = value;
                }
                break;
              }
              case 18: {
                uint? value = _single_maxConcurrencyLimit_codec.Read(input);
                if (maxConcurrencyLimit_ == null || value != 0) {
                  MaxConcurrencyLimit = value;
                }
                break;
              }
              case 26: {
                if (concurrencyUpdateInterval_ == null) {
                  ConcurrencyUpdateInterval = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(ConcurrencyUpdateInterval);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Parameters controlling the periodic minRTT recalculation.
      /// </summary>
      public sealed partial class MinimumRTTCalculationParams : pb::IMessage<MinimumRTTCalculationParams> {
        private static readonly pb::MessageParser<MinimumRTTCalculationParams> _parser = new pb::MessageParser<MinimumRTTCalculationParams>(() => new MinimumRTTCalculationParams());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MinimumRTTCalculationParams> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MinimumRTTCalculationParams() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MinimumRTTCalculationParams(MinimumRTTCalculationParams other) : this() {
          interval_ = other.interval_ != null ? other.interval_.Clone() : null;
          RequestCount = other.RequestCount;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MinimumRTTCalculationParams Clone() {
          return new MinimumRTTCalculationParams(this);
        }

        /// <summary>Field number for the "interval" field.</summary>
        public const int IntervalFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Duration interval_;
        /// <summary>
        /// The time interval between recalculating the minimum request round-trip time.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration Interval {
          get { return interval_; }
          set {
            interval_ = value;
          }
        }

        /// <summary>Field number for the "request_count" field.</summary>
        public const int RequestCountFieldNumber = 2;
        private static readonly pb::FieldCodec<uint?> _single_requestCount_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
        private uint? requestCount_;
        /// <summary>
        /// The number of requests to aggregate/sample during the minRTT recalculation window before
        /// updating. Defaults to 50.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint? RequestCount {
          get { return requestCount_; }
          set {
            requestCount_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MinimumRTTCalculationParams);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MinimumRTTCalculationParams other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Interval, other.Interval)) return false;
          if (RequestCount != other.RequestCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (interval_ != null) hash ^= Interval.GetHashCode();
          if (requestCount_ != null) hash ^= RequestCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (interval_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Interval);
          }
          if (requestCount_ != null) {
            _single_requestCount_codec.WriteTagAndValue(output, RequestCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (interval_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
          }
          if (requestCount_ != null) {
            size += _single_requestCount_codec.CalculateSizeWithTag(RequestCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MinimumRTTCalculationParams other) {
          if (other == null) {
            return;
          }
          if (other.interval_ != null) {
            if (interval_ == null) {
              Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            Interval.MergeFrom(other.Interval);
          }
          if (other.requestCount_ != null) {
            if (requestCount_ == null || other.RequestCount != 0) {
              RequestCount = other.RequestCount;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (interval_ == null) {
                  Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(Interval);
                break;
              }
              case 18: {
                uint? value = _single_requestCount_codec.Read(input);
                if (requestCount_ == null || value != 0) {
                  RequestCount = value;
                }
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AdaptiveConcurrency : pb::IMessage<AdaptiveConcurrency> {
    private static readonly pb::MessageParser<AdaptiveConcurrency> _parser = new pb::MessageParser<AdaptiveConcurrency>(() => new AdaptiveConcurrency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdaptiveConcurrency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.AdaptiveConcurrencyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdaptiveConcurrency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdaptiveConcurrency(AdaptiveConcurrency other) : this() {
      switch (other.ConcurrencyControllerConfigCase) {
        case ConcurrencyControllerConfigOneofCase.GradientControllerConfig:
          GradientControllerConfig = other.GradientControllerConfig.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdaptiveConcurrency Clone() {
      return new AdaptiveConcurrency(this);
    }

    /// <summary>Field number for the "gradient_controller_config" field.</summary>
    public const int GradientControllerConfigFieldNumber = 1;
    /// <summary>
    /// Gradient concurrency control will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig GradientControllerConfig {
      get { return concurrencyControllerConfigCase_ == ConcurrencyControllerConfigOneofCase.GradientControllerConfig ? (global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig) concurrencyControllerConfig_ : null; }
      set {
        concurrencyControllerConfig_ = value;
        concurrencyControllerConfigCase_ = value == null ? ConcurrencyControllerConfigOneofCase.None : ConcurrencyControllerConfigOneofCase.GradientControllerConfig;
      }
    }

    private object concurrencyControllerConfig_;
    /// <summary>Enum of possible cases for the "concurrency_controller_config" oneof.</summary>
    public enum ConcurrencyControllerConfigOneofCase {
      None = 0,
      GradientControllerConfig = 1,
    }
    private ConcurrencyControllerConfigOneofCase concurrencyControllerConfigCase_ = ConcurrencyControllerConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcurrencyControllerConfigOneofCase ConcurrencyControllerConfigCase {
      get { return concurrencyControllerConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConcurrencyControllerConfig() {
      concurrencyControllerConfigCase_ = ConcurrencyControllerConfigOneofCase.None;
      concurrencyControllerConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdaptiveConcurrency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdaptiveConcurrency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GradientControllerConfig, other.GradientControllerConfig)) return false;
      if (ConcurrencyControllerConfigCase != other.ConcurrencyControllerConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (concurrencyControllerConfigCase_ == ConcurrencyControllerConfigOneofCase.GradientControllerConfig) hash ^= GradientControllerConfig.GetHashCode();
      hash ^= (int) concurrencyControllerConfigCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (concurrencyControllerConfigCase_ == ConcurrencyControllerConfigOneofCase.GradientControllerConfig) {
        output.WriteRawTag(10);
        output.WriteMessage(GradientControllerConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (concurrencyControllerConfigCase_ == ConcurrencyControllerConfigOneofCase.GradientControllerConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradientControllerConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdaptiveConcurrency other) {
      if (other == null) {
        return;
      }
      switch (other.ConcurrencyControllerConfigCase) {
        case ConcurrencyControllerConfigOneofCase.GradientControllerConfig:
          if (GradientControllerConfig == null) {
            GradientControllerConfig = new global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig();
          }
          GradientControllerConfig.MergeFrom(other.GradientControllerConfig);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig subBuilder = new global::Envoy.Config.Filter.Http.AdaptiveConcurrency.V2Alpha.GradientControllerConfig();
            if (concurrencyControllerConfigCase_ == ConcurrencyControllerConfigOneofCase.GradientControllerConfig) {
              subBuilder.MergeFrom(GradientControllerConfig);
            }
            input.ReadMessage(subBuilder);
            GradientControllerConfig = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
