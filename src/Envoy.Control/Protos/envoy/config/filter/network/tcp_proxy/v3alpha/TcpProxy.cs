// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/config/filter/network/tcp_proxy/v3alpha/tcp_proxy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Network.TcpProxy.V3Alpha {

  /// <summary>Holder for reflection information generated from envoy/config/filter/network/tcp_proxy/v3alpha/tcp_proxy.proto</summary>
  public static partial class TcpProxyReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/config/filter/network/tcp_proxy/v3alpha/tcp_proxy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TcpProxyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj1lbnZveS9jb25maWcvZmlsdGVyL25ldHdvcmsvdGNwX3Byb3h5L3YzYWxw",
            "aGEvdGNwX3Byb3h5LnByb3RvEi1lbnZveS5jb25maWcuZmlsdGVyLm5ldHdv",
            "cmsudGNwX3Byb3h5LnYzYWxwaGEaNWVudm95L2NvbmZpZy9maWx0ZXIvYWNj",
            "ZXNzbG9nL3YzYWxwaGEvYWNjZXNzbG9nLnByb3RvGiRlbnZveS9hcGkvdjNh",
            "bHBoYS9jb3JlL2FkZHJlc3MucHJvdG8aIWVudm95L2FwaS92M2FscGhhL2Nv",
            "cmUvYmFzZS5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3Rv",
            "Gh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aF3ZhbGlkYXRlL3Zh",
            "bGlkYXRlLnByb3RvIrkJCghUY3BQcm94eRIeCgtzdGF0X3ByZWZpeBgBIAEo",
            "CUIJuunAAwRyAiABEhEKB2NsdXN0ZXIYAiABKAlIABJkChF3ZWlnaHRlZF9j",
            "bHVzdGVycxgKIAEoCzJHLmVudm95LmNvbmZpZy5maWx0ZXIubmV0d29yay50",
            "Y3BfcHJveHkudjNhbHBoYS5UY3BQcm94eS5XZWlnaHRlZENsdXN0ZXJIABI4",
            "Cg5tZXRhZGF0YV9tYXRjaBgJIAEoCzIgLmVudm95LmFwaS52M2FscGhhLmNv",
            "cmUuTWV0YWRhdGESOwoMaWRsZV90aW1lb3V0GAggASgLMhkuZ29vZ2xlLnBy",
            "b3RvYnVmLkR1cmF0aW9uQgq66cADBaoBAioAEjoKF2Rvd25zdHJlYW1faWRs",
            "ZV90aW1lb3V0GAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjgK",
            "FXVwc3RyZWFtX2lkbGVfdGltZW91dBgEIAEoCzIZLmdvb2dsZS5wcm90b2J1",
            "Zi5EdXJhdGlvbhJECgphY2Nlc3NfbG9nGAUgAygLMjAuZW52b3kuY29uZmln",
            "LmZpbHRlci5hY2Nlc3Nsb2cudjNhbHBoYS5BY2Nlc3NMb2cSXwoNZGVwcmVj",
            "YXRlZF92MRgGIAEoCzJELmVudm95LmNvbmZpZy5maWx0ZXIubmV0d29yay50",
            "Y3BfcHJveHkudjNhbHBoYS5UY3BQcm94eS5EZXByZWNhdGVkVjFCAhgBEkUK",
            "FG1heF9jb25uZWN0X2F0dGVtcHRzGAcgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlVJbnQzMlZhbHVlQgm66cADBCoCKAEazgIKDERlcHJlY2F0ZWRWMRJpCgZy",
            "b3V0ZXMYASADKAsyTS5lbnZveS5jb25maWcuZmlsdGVyLm5ldHdvcmsudGNw",
            "X3Byb3h5LnYzYWxwaGEuVGNwUHJveHkuRGVwcmVjYXRlZFYxLlRDUFJvdXRl",
            "Qgq66cADBZIBAggBGtIBCghUQ1BSb3V0ZRIaCgdjbHVzdGVyGAEgASgJQgm6",
            "6cADBHICIAESPgoTZGVzdGluYXRpb25faXBfbGlzdBgCIAMoCzIhLmVudm95",
            "LmFwaS52M2FscGhhLmNvcmUuQ2lkclJhbmdlEhkKEWRlc3RpbmF0aW9uX3Bv",
            "cnRzGAMgASgJEjkKDnNvdXJjZV9pcF9saXN0GAQgAygLMiEuZW52b3kuYXBp",
            "LnYzYWxwaGEuY29yZS5DaWRyUmFuZ2USFAoMc291cmNlX3BvcnRzGAUgASgJ",
            "GssBCg9XZWlnaHRlZENsdXN0ZXIScwoIY2x1c3RlcnMYASADKAsyVS5lbnZv",
            "eS5jb25maWcuZmlsdGVyLm5ldHdvcmsudGNwX3Byb3h5LnYzYWxwaGEuVGNw",
            "UHJveHkuV2VpZ2h0ZWRDbHVzdGVyLkNsdXN0ZXJXZWlnaHRCCrrpwAMFkgEC",
            "CAEaQwoNQ2x1c3RlcldlaWdodBIXCgRuYW1lGAEgASgJQgm66cADBHICIAES",
            "GQoGd2VpZ2h0GAIgASgNQgm66cADBCoCKAFCGgoRY2x1c3Rlcl9zcGVjaWZp",
            "ZXISBbjpwAMBQk4KO2lvLmVudm95cHJveHkuZW52b3kuY29uZmlnLmZpbHRl",
            "ci5uZXR3b3JrLnRjcF9wcm94eS52M2FscGhhQg1UY3BQcm94eVByb3RvUAFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Filter.Accesslog.V3Alpha.AccesslogReflection.Descriptor, global::Envoy.Api.V3Alpha.Core.AddressReflection.Descriptor, global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy), global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Parser, new[]{ "StatPrefix", "Cluster", "WeightedClusters", "MetadataMatch", "IdleTimeout", "DownstreamIdleTimeout", "UpstreamIdleTimeout", "AccessLog", "DeprecatedV1", "MaxConnectAttempts" }, new[]{ "ClusterSpecifier" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1), global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Parser, new[]{ "Routes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Types.TCPRoute), global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Types.TCPRoute.Parser, new[]{ "Cluster", "DestinationIpList", "DestinationPorts", "SourceIpList", "SourcePorts" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster), global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Parser, new[]{ "Clusters" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Types.ClusterWeight), global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Types.ClusterWeight.Parser, new[]{ "Name", "Weight" }, null, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TcpProxy : pb::IMessage<TcpProxy> {
    private static readonly pb::MessageParser<TcpProxy> _parser = new pb::MessageParser<TcpProxy>(() => new TcpProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProxy(TcpProxy other) : this() {
      statPrefix_ = other.statPrefix_;
      metadataMatch_ = other.metadataMatch_ != null ? other.metadataMatch_.Clone() : null;
      idleTimeout_ = other.idleTimeout_ != null ? other.idleTimeout_.Clone() : null;
      downstreamIdleTimeout_ = other.downstreamIdleTimeout_ != null ? other.downstreamIdleTimeout_.Clone() : null;
      upstreamIdleTimeout_ = other.upstreamIdleTimeout_ != null ? other.upstreamIdleTimeout_.Clone() : null;
      accessLog_ = other.accessLog_.Clone();
      deprecatedV1_ = other.deprecatedV1_ != null ? other.deprecatedV1_.Clone() : null;
      MaxConnectAttempts = other.MaxConnectAttempts;
      switch (other.ClusterSpecifierCase) {
        case ClusterSpecifierOneofCase.Cluster:
          Cluster = other.Cluster;
          break;
        case ClusterSpecifierOneofCase.WeightedClusters:
          WeightedClusters = other.WeightedClusters.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProxy Clone() {
      return new TcpProxy(this);
    }

    /// <summary>Field number for the "stat_prefix" field.</summary>
    public const int StatPrefixFieldNumber = 1;
    private string statPrefix_ = "";
    /// <summary>
    /// The prefix to use when emitting :ref:`statistics
    /// &lt;config_network_filters_tcp_proxy_stats>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatPrefix {
      get { return statPrefix_; }
      set {
        statPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 2;
    /// <summary>
    /// The upstream cluster to connect to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cluster {
      get { return clusterSpecifierCase_ == ClusterSpecifierOneofCase.Cluster ? (string) clusterSpecifier_ : ""; }
      set {
        clusterSpecifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        clusterSpecifierCase_ = ClusterSpecifierOneofCase.Cluster;
      }
    }

    /// <summary>Field number for the "weighted_clusters" field.</summary>
    public const int WeightedClustersFieldNumber = 10;
    /// <summary>
    /// Multiple upstream clusters can be specified for a given route. The
    /// request is routed to one of the upstream clusters based on weights
    /// assigned to each cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster WeightedClusters {
      get { return clusterSpecifierCase_ == ClusterSpecifierOneofCase.WeightedClusters ? (global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster) clusterSpecifier_ : null; }
      set {
        clusterSpecifier_ = value;
        clusterSpecifierCase_ = value == null ? ClusterSpecifierOneofCase.None : ClusterSpecifierOneofCase.WeightedClusters;
      }
    }

    /// <summary>Field number for the "metadata_match" field.</summary>
    public const int MetadataMatchFieldNumber = 9;
    private global::Envoy.Api.V3Alpha.Core.Metadata metadataMatch_;
    /// <summary>
    /// Optional endpoint metadata match criteria. Only endpoints in the upstream
    /// cluster with metadata matching that set in metadata_match will be
    /// considered. The filter name should be specified as *envoy.lb*.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.Metadata MetadataMatch {
      get { return metadataMatch_; }
      set {
        metadataMatch_ = value;
      }
    }

    /// <summary>Field number for the "idle_timeout" field.</summary>
    public const int IdleTimeoutFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Duration idleTimeout_;
    /// <summary>
    /// The idle timeout for connections managed by the TCP proxy filter. The idle timeout
    /// is defined as the period in which there are no bytes sent or received on either
    /// the upstream or downstream connection. If not set, connections will never be closed
    /// by the TCP proxy due to being idle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration IdleTimeout {
      get { return idleTimeout_; }
      set {
        idleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "downstream_idle_timeout" field.</summary>
    public const int DownstreamIdleTimeoutFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration downstreamIdleTimeout_;
    /// <summary>
    /// [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
    /// filter. The idle timeout is defined as the period in which there is no
    /// active traffic. If not set, there is no idle timeout. When the idle timeout
    /// is reached the connection will be closed. The distinction between
    /// downstream_idle_timeout/upstream_idle_timeout provides a means to set
    /// timeout based on the last byte sent on the downstream/upstream connection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration DownstreamIdleTimeout {
      get { return downstreamIdleTimeout_; }
      set {
        downstreamIdleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "upstream_idle_timeout" field.</summary>
    public const int UpstreamIdleTimeoutFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration upstreamIdleTimeout_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration UpstreamIdleTimeout {
      get { return upstreamIdleTimeout_; }
      set {
        upstreamIdleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "access_log" field.</summary>
    public const int AccessLogFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V3Alpha.AccessLog> _repeated_accessLog_codec
        = pb::FieldCodec.ForMessage(42, global::Envoy.Config.Filter.Accesslog.V3Alpha.AccessLog.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V3Alpha.AccessLog> accessLog_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V3Alpha.AccessLog>();
    /// <summary>
    /// Configuration for :ref:`access logs &lt;arch_overview_access_logs>`
    /// emitted by the this tcp_proxy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V3Alpha.AccessLog> AccessLog {
      get { return accessLog_; }
    }

    /// <summary>Field number for the "deprecated_v1" field.</summary>
    public const int DeprecatedV1FieldNumber = 6;
    private global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1 deprecatedV1_;
    /// <summary>
    /// [#not-implemented-hide:] Deprecated.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1 DeprecatedV1 {
      get { return deprecatedV1_; }
      set {
        deprecatedV1_ = value;
      }
    }

    /// <summary>Field number for the "max_connect_attempts" field.</summary>
    public const int MaxConnectAttemptsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint?> _single_maxConnectAttempts_codec = pb::FieldCodec.ForStructWrapper<uint>(58);
    private uint? maxConnectAttempts_;
    /// <summary>
    /// The maximum number of unsuccessful connection attempts that will be made before
    /// giving up. If the parameter is not specified, 1 connection attempt will be made.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? MaxConnectAttempts {
      get { return maxConnectAttempts_; }
      set {
        maxConnectAttempts_ = value;
      }
    }


    private object clusterSpecifier_;
    /// <summary>Enum of possible cases for the "cluster_specifier" oneof.</summary>
    public enum ClusterSpecifierOneofCase {
      None = 0,
      Cluster = 2,
      WeightedClusters = 10,
    }
    private ClusterSpecifierOneofCase clusterSpecifierCase_ = ClusterSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterSpecifierOneofCase ClusterSpecifierCase {
      get { return clusterSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClusterSpecifier() {
      clusterSpecifierCase_ = ClusterSpecifierOneofCase.None;
      clusterSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatPrefix != other.StatPrefix) return false;
      if (Cluster != other.Cluster) return false;
      if (!object.Equals(WeightedClusters, other.WeightedClusters)) return false;
      if (!object.Equals(MetadataMatch, other.MetadataMatch)) return false;
      if (!object.Equals(IdleTimeout, other.IdleTimeout)) return false;
      if (!object.Equals(DownstreamIdleTimeout, other.DownstreamIdleTimeout)) return false;
      if (!object.Equals(UpstreamIdleTimeout, other.UpstreamIdleTimeout)) return false;
      if(!accessLog_.Equals(other.accessLog_)) return false;
      if (!object.Equals(DeprecatedV1, other.DeprecatedV1)) return false;
      if (MaxConnectAttempts != other.MaxConnectAttempts) return false;
      if (ClusterSpecifierCase != other.ClusterSpecifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatPrefix.Length != 0) hash ^= StatPrefix.GetHashCode();
      if (clusterSpecifierCase_ == ClusterSpecifierOneofCase.Cluster) hash ^= Cluster.GetHashCode();
      if (clusterSpecifierCase_ == ClusterSpecifierOneofCase.WeightedClusters) hash ^= WeightedClusters.GetHashCode();
      if (metadataMatch_ != null) hash ^= MetadataMatch.GetHashCode();
      if (idleTimeout_ != null) hash ^= IdleTimeout.GetHashCode();
      if (downstreamIdleTimeout_ != null) hash ^= DownstreamIdleTimeout.GetHashCode();
      if (upstreamIdleTimeout_ != null) hash ^= UpstreamIdleTimeout.GetHashCode();
      hash ^= accessLog_.GetHashCode();
      if (deprecatedV1_ != null) hash ^= DeprecatedV1.GetHashCode();
      if (maxConnectAttempts_ != null) hash ^= MaxConnectAttempts.GetHashCode();
      hash ^= (int) clusterSpecifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (clusterSpecifierCase_ == ClusterSpecifierOneofCase.Cluster) {
        output.WriteRawTag(18);
        output.WriteString(Cluster);
      }
      if (downstreamIdleTimeout_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DownstreamIdleTimeout);
      }
      if (upstreamIdleTimeout_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpstreamIdleTimeout);
      }
      accessLog_.WriteTo(output, _repeated_accessLog_codec);
      if (deprecatedV1_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeprecatedV1);
      }
      if (maxConnectAttempts_ != null) {
        _single_maxConnectAttempts_codec.WriteTagAndValue(output, MaxConnectAttempts);
      }
      if (idleTimeout_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IdleTimeout);
      }
      if (metadataMatch_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MetadataMatch);
      }
      if (clusterSpecifierCase_ == ClusterSpecifierOneofCase.WeightedClusters) {
        output.WriteRawTag(82);
        output.WriteMessage(WeightedClusters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatPrefix);
      }
      if (clusterSpecifierCase_ == ClusterSpecifierOneofCase.Cluster) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cluster);
      }
      if (clusterSpecifierCase_ == ClusterSpecifierOneofCase.WeightedClusters) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightedClusters);
      }
      if (metadataMatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetadataMatch);
      }
      if (idleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleTimeout);
      }
      if (downstreamIdleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownstreamIdleTimeout);
      }
      if (upstreamIdleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamIdleTimeout);
      }
      size += accessLog_.CalculateSize(_repeated_accessLog_codec);
      if (deprecatedV1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedV1);
      }
      if (maxConnectAttempts_ != null) {
        size += _single_maxConnectAttempts_codec.CalculateSizeWithTag(MaxConnectAttempts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpProxy other) {
      if (other == null) {
        return;
      }
      if (other.StatPrefix.Length != 0) {
        StatPrefix = other.StatPrefix;
      }
      if (other.metadataMatch_ != null) {
        if (metadataMatch_ == null) {
          MetadataMatch = new global::Envoy.Api.V3Alpha.Core.Metadata();
        }
        MetadataMatch.MergeFrom(other.MetadataMatch);
      }
      if (other.idleTimeout_ != null) {
        if (idleTimeout_ == null) {
          IdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        IdleTimeout.MergeFrom(other.IdleTimeout);
      }
      if (other.downstreamIdleTimeout_ != null) {
        if (downstreamIdleTimeout_ == null) {
          DownstreamIdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        DownstreamIdleTimeout.MergeFrom(other.DownstreamIdleTimeout);
      }
      if (other.upstreamIdleTimeout_ != null) {
        if (upstreamIdleTimeout_ == null) {
          UpstreamIdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        UpstreamIdleTimeout.MergeFrom(other.UpstreamIdleTimeout);
      }
      accessLog_.Add(other.accessLog_);
      if (other.deprecatedV1_ != null) {
        if (deprecatedV1_ == null) {
          DeprecatedV1 = new global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1();
        }
        DeprecatedV1.MergeFrom(other.DeprecatedV1);
      }
      if (other.maxConnectAttempts_ != null) {
        if (maxConnectAttempts_ == null || other.MaxConnectAttempts != 0) {
          MaxConnectAttempts = other.MaxConnectAttempts;
        }
      }
      switch (other.ClusterSpecifierCase) {
        case ClusterSpecifierOneofCase.Cluster:
          Cluster = other.Cluster;
          break;
        case ClusterSpecifierOneofCase.WeightedClusters:
          if (WeightedClusters == null) {
            WeightedClusters = new global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster();
          }
          WeightedClusters.MergeFrom(other.WeightedClusters);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            Cluster = input.ReadString();
            break;
          }
          case 26: {
            if (downstreamIdleTimeout_ == null) {
              DownstreamIdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(DownstreamIdleTimeout);
            break;
          }
          case 34: {
            if (upstreamIdleTimeout_ == null) {
              UpstreamIdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(UpstreamIdleTimeout);
            break;
          }
          case 42: {
            accessLog_.AddEntriesFrom(input, _repeated_accessLog_codec);
            break;
          }
          case 50: {
            if (deprecatedV1_ == null) {
              DeprecatedV1 = new global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1();
            }
            input.ReadMessage(DeprecatedV1);
            break;
          }
          case 58: {
            uint? value = _single_maxConnectAttempts_codec.Read(input);
            if (maxConnectAttempts_ == null || value != 0) {
              MaxConnectAttempts = value;
            }
            break;
          }
          case 66: {
            if (idleTimeout_ == null) {
              IdleTimeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(IdleTimeout);
            break;
          }
          case 74: {
            if (metadataMatch_ == null) {
              MetadataMatch = new global::Envoy.Api.V3Alpha.Core.Metadata();
            }
            input.ReadMessage(MetadataMatch);
            break;
          }
          case 82: {
            global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster subBuilder = new global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster();
            if (clusterSpecifierCase_ == ClusterSpecifierOneofCase.WeightedClusters) {
              subBuilder.MergeFrom(WeightedClusters);
            }
            input.ReadMessage(subBuilder);
            WeightedClusters = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TcpProxy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// [#not-implemented-hide:] Deprecated.
      /// TCP Proxy filter configuration using V1 format.
      /// </summary>
      public sealed partial class DeprecatedV1 : pb::IMessage<DeprecatedV1> {
        private static readonly pb::MessageParser<DeprecatedV1> _parser = new pb::MessageParser<DeprecatedV1>(() => new DeprecatedV1());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeprecatedV1> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1(DeprecatedV1 other) : this() {
          routes_ = other.routes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1 Clone() {
          return new DeprecatedV1(this);
        }

        /// <summary>Field number for the "routes" field.</summary>
        public const int RoutesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Types.TCPRoute> _repeated_routes_codec
            = pb::FieldCodec.ForMessage(10, global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Types.TCPRoute.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Types.TCPRoute> routes_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Types.TCPRoute>();
        /// <summary>
        /// The route table for the filter. All filter instances must have a route
        /// table, even if it is empty.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Types.TCPRoute> Routes {
          get { return routes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeprecatedV1);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeprecatedV1 other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!routes_.Equals(other.routes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= routes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          routes_.WriteTo(output, _repeated_routes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += routes_.CalculateSize(_repeated_routes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeprecatedV1 other) {
          if (other == null) {
            return;
          }
          routes_.Add(other.routes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                routes_.AddEntriesFrom(input, _repeated_routes_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DeprecatedV1 message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A TCP proxy route consists of a set of optional L4 criteria and the
          /// name of a cluster. If a downstream connection matches all the
          /// specified criteria, the cluster in the route is used for the
          /// corresponding upstream connection. Routes are tried in the order
          /// specified until a match is found. If no match is found, the connection
          /// is closed. A route with no criteria is valid and always produces a
          /// match.
          /// </summary>
          public sealed partial class TCPRoute : pb::IMessage<TCPRoute> {
            private static readonly pb::MessageParser<TCPRoute> _parser = new pb::MessageParser<TCPRoute>(() => new TCPRoute());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TCPRoute> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.DeprecatedV1.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TCPRoute() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TCPRoute(TCPRoute other) : this() {
              cluster_ = other.cluster_;
              destinationIpList_ = other.destinationIpList_.Clone();
              destinationPorts_ = other.destinationPorts_;
              sourceIpList_ = other.sourceIpList_.Clone();
              sourcePorts_ = other.sourcePorts_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TCPRoute Clone() {
              return new TCPRoute(this);
            }

            /// <summary>Field number for the "cluster" field.</summary>
            public const int ClusterFieldNumber = 1;
            private string cluster_ = "";
            /// <summary>
            /// The cluster to connect to when a the downstream network connection
            /// matches the specified criteria.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Cluster {
              get { return cluster_; }
              set {
                cluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "destination_ip_list" field.</summary>
            public const int DestinationIpListFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.Core.CidrRange> _repeated_destinationIpList_codec
                = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V3Alpha.Core.CidrRange.Parser);
            private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> destinationIpList_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange>();
            /// <summary>
            /// An optional list of IP address subnets in the form
            /// “ip_address/xx”. The criteria is satisfied if the destination IP
            /// address of the downstream connection is contained in at least one of
            /// the specified subnets. If the parameter is not specified or the list
            /// is empty, the destination IP address is ignored. The destination IP
            /// address of the downstream connection might be different from the
            /// addresses on which the proxy is listening if the connection has been
            /// redirected.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> DestinationIpList {
              get { return destinationIpList_; }
            }

            /// <summary>Field number for the "destination_ports" field.</summary>
            public const int DestinationPortsFieldNumber = 3;
            private string destinationPorts_ = "";
            /// <summary>
            /// An optional string containing a comma-separated list of port numbers
            /// or ranges. The criteria is satisfied if the destination port of the
            /// downstream connection is contained in at least one of the specified
            /// ranges. If the parameter is not specified, the destination port is
            /// ignored. The destination port address of the downstream connection
            /// might be different from the port on which the proxy is listening if
            /// the connection has been redirected.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string DestinationPorts {
              get { return destinationPorts_; }
              set {
                destinationPorts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "source_ip_list" field.</summary>
            public const int SourceIpListFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.Core.CidrRange> _repeated_sourceIpList_codec
                = pb::FieldCodec.ForMessage(34, global::Envoy.Api.V3Alpha.Core.CidrRange.Parser);
            private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> sourceIpList_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange>();
            /// <summary>
            /// An optional list of IP address subnets in the form
            /// “ip_address/xx”. The criteria is satisfied if the source IP address
            /// of the downstream connection is contained in at least one of the
            /// specified subnets. If the parameter is not specified or the list is
            /// empty, the source IP address is ignored.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.CidrRange> SourceIpList {
              get { return sourceIpList_; }
            }

            /// <summary>Field number for the "source_ports" field.</summary>
            public const int SourcePortsFieldNumber = 5;
            private string sourcePorts_ = "";
            /// <summary>
            /// An optional string containing a comma-separated list of port numbers
            /// or ranges. The criteria is satisfied if the source port of the
            /// downstream connection is contained in at least one of the specified
            /// ranges. If the parameter is not specified, the source port is
            /// ignored.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SourcePorts {
              get { return sourcePorts_; }
              set {
                sourcePorts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TCPRoute);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TCPRoute other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Cluster != other.Cluster) return false;
              if(!destinationIpList_.Equals(other.destinationIpList_)) return false;
              if (DestinationPorts != other.DestinationPorts) return false;
              if(!sourceIpList_.Equals(other.sourceIpList_)) return false;
              if (SourcePorts != other.SourcePorts) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Cluster.Length != 0) hash ^= Cluster.GetHashCode();
              hash ^= destinationIpList_.GetHashCode();
              if (DestinationPorts.Length != 0) hash ^= DestinationPorts.GetHashCode();
              hash ^= sourceIpList_.GetHashCode();
              if (SourcePorts.Length != 0) hash ^= SourcePorts.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Cluster.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Cluster);
              }
              destinationIpList_.WriteTo(output, _repeated_destinationIpList_codec);
              if (DestinationPorts.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(DestinationPorts);
              }
              sourceIpList_.WriteTo(output, _repeated_sourceIpList_codec);
              if (SourcePorts.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(SourcePorts);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Cluster.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Cluster);
              }
              size += destinationIpList_.CalculateSize(_repeated_destinationIpList_codec);
              if (DestinationPorts.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationPorts);
              }
              size += sourceIpList_.CalculateSize(_repeated_sourceIpList_codec);
              if (SourcePorts.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePorts);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TCPRoute other) {
              if (other == null) {
                return;
              }
              if (other.Cluster.Length != 0) {
                Cluster = other.Cluster;
              }
              destinationIpList_.Add(other.destinationIpList_);
              if (other.DestinationPorts.Length != 0) {
                DestinationPorts = other.DestinationPorts;
              }
              sourceIpList_.Add(other.sourceIpList_);
              if (other.SourcePorts.Length != 0) {
                SourcePorts = other.SourcePorts;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Cluster = input.ReadString();
                    break;
                  }
                  case 18: {
                    destinationIpList_.AddEntriesFrom(input, _repeated_destinationIpList_codec);
                    break;
                  }
                  case 26: {
                    DestinationPorts = input.ReadString();
                    break;
                  }
                  case 34: {
                    sourceIpList_.AddEntriesFrom(input, _repeated_sourceIpList_codec);
                    break;
                  }
                  case 42: {
                    SourcePorts = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Allows for specification of multiple upstream clusters along with weights
      /// that indicate the percentage of traffic to be forwarded to each cluster.
      /// The router selects an upstream cluster based on these weights.
      /// </summary>
      public sealed partial class WeightedCluster : pb::IMessage<WeightedCluster> {
        private static readonly pb::MessageParser<WeightedCluster> _parser = new pb::MessageParser<WeightedCluster>(() => new WeightedCluster());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WeightedCluster> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WeightedCluster() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WeightedCluster(WeightedCluster other) : this() {
          clusters_ = other.clusters_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WeightedCluster Clone() {
          return new WeightedCluster(this);
        }

        /// <summary>Field number for the "clusters" field.</summary>
        public const int ClustersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Types.ClusterWeight> _repeated_clusters_codec
            = pb::FieldCodec.ForMessage(10, global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Types.ClusterWeight.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Types.ClusterWeight> clusters_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Types.ClusterWeight>();
        /// <summary>
        /// Specifies one or more upstream clusters associated with the route.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Types.ClusterWeight> Clusters {
          get { return clusters_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WeightedCluster);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WeightedCluster other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!clusters_.Equals(other.clusters_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= clusters_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          clusters_.WriteTo(output, _repeated_clusters_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += clusters_.CalculateSize(_repeated_clusters_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WeightedCluster other) {
          if (other == null) {
            return;
          }
          clusters_.Add(other.clusters_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the WeightedCluster message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ClusterWeight : pb::IMessage<ClusterWeight> {
            private static readonly pb::MessageParser<ClusterWeight> _parser = new pb::MessageParser<ClusterWeight>(() => new ClusterWeight());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ClusterWeight> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Envoy.Config.Filter.Network.TcpProxy.V3Alpha.TcpProxy.Types.WeightedCluster.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClusterWeight() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClusterWeight(ClusterWeight other) : this() {
              name_ = other.name_;
              weight_ = other.weight_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClusterWeight Clone() {
              return new ClusterWeight(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            /// <summary>
            /// Name of the upstream cluster.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "weight" field.</summary>
            public const int WeightFieldNumber = 2;
            private uint weight_;
            /// <summary>
            /// When a request matches the route, the choice of an upstream cluster is
            /// determined by its weight. The sum of weights across all entries in the
            /// clusters array determines the total weight.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Weight {
              get { return weight_; }
              set {
                weight_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ClusterWeight);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ClusterWeight other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (Weight != other.Weight) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Weight != 0) hash ^= Weight.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (Weight != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Weight);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Weight != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ClusterWeight other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Weight != 0) {
                Weight = other.Weight;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 16: {
                    Weight = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
