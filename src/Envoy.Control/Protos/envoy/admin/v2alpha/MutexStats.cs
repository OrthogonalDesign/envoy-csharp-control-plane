// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/admin/v2alpha/mutex_stats.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Admin.V2Alpha {

  /// <summary>Holder for reflection information generated from envoy/admin/v2alpha/mutex_stats.proto</summary>
  public static partial class MutexStatsReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/admin/v2alpha/mutex_stats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MutexStatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVlbnZveS9hZG1pbi92MmFscGhhL211dGV4X3N0YXRzLnByb3RvEhNlbnZv",
            "eS5hZG1pbi52MmFscGhhImAKCk11dGV4U3RhdHMSFwoPbnVtX2NvbnRlbnRp",
            "b25zGAEgASgEEhsKE2N1cnJlbnRfd2FpdF9jeWNsZXMYAiABKAQSHAoUbGlm",
            "ZXRpbWVfd2FpdF9jeWNsZXMYAyABKARCNgohaW8uZW52b3lwcm94eS5lbnZv",
            "eS5hZG1pbi52MmFscGhhQg9NdXRleFN0YXRzUHJvdG9QAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Admin.V2Alpha.MutexStats), global::Envoy.Admin.V2Alpha.MutexStats.Parser, new[]{ "NumContentions", "CurrentWaitCycles", "LifetimeWaitCycles" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Proto representation of the statistics collected upon absl::Mutex contention, if Envoy is run
  /// under :option:`--enable-mutex-tracing`. For more information, see the `absl::Mutex`
  /// [docs](https://abseil.io/about/design/mutex#extra-features).
  ///
  /// *NB*: The wait cycles below are measured by `absl::base_internal::CycleClock`, and may not
  /// correspond to core clock frequency. For more information, see the `CycleClock`
  /// [docs](https://github.com/abseil/abseil-cpp/blob/master/absl/base/internal/cycleclock.h).
  /// </summary>
  public sealed partial class MutexStats : pb::IMessage<MutexStats> {
    private static readonly pb::MessageParser<MutexStats> _parser = new pb::MessageParser<MutexStats>(() => new MutexStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MutexStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Admin.V2Alpha.MutexStatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutexStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutexStats(MutexStats other) : this() {
      numContentions_ = other.numContentions_;
      currentWaitCycles_ = other.currentWaitCycles_;
      lifetimeWaitCycles_ = other.lifetimeWaitCycles_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MutexStats Clone() {
      return new MutexStats(this);
    }

    /// <summary>Field number for the "num_contentions" field.</summary>
    public const int NumContentionsFieldNumber = 1;
    private ulong numContentions_;
    /// <summary>
    /// The number of individual mutex contentions which have occurred since startup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumContentions {
      get { return numContentions_; }
      set {
        numContentions_ = value;
      }
    }

    /// <summary>Field number for the "current_wait_cycles" field.</summary>
    public const int CurrentWaitCyclesFieldNumber = 2;
    private ulong currentWaitCycles_;
    /// <summary>
    /// The length of the current contention wait cycle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CurrentWaitCycles {
      get { return currentWaitCycles_; }
      set {
        currentWaitCycles_ = value;
      }
    }

    /// <summary>Field number for the "lifetime_wait_cycles" field.</summary>
    public const int LifetimeWaitCyclesFieldNumber = 3;
    private ulong lifetimeWaitCycles_;
    /// <summary>
    /// The lifetime total of all contention wait cycles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LifetimeWaitCycles {
      get { return lifetimeWaitCycles_; }
      set {
        lifetimeWaitCycles_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MutexStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MutexStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumContentions != other.NumContentions) return false;
      if (CurrentWaitCycles != other.CurrentWaitCycles) return false;
      if (LifetimeWaitCycles != other.LifetimeWaitCycles) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumContentions != 0UL) hash ^= NumContentions.GetHashCode();
      if (CurrentWaitCycles != 0UL) hash ^= CurrentWaitCycles.GetHashCode();
      if (LifetimeWaitCycles != 0UL) hash ^= LifetimeWaitCycles.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumContentions != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(NumContentions);
      }
      if (CurrentWaitCycles != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CurrentWaitCycles);
      }
      if (LifetimeWaitCycles != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LifetimeWaitCycles);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumContentions != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumContentions);
      }
      if (CurrentWaitCycles != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentWaitCycles);
      }
      if (LifetimeWaitCycles != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LifetimeWaitCycles);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MutexStats other) {
      if (other == null) {
        return;
      }
      if (other.NumContentions != 0UL) {
        NumContentions = other.NumContentions;
      }
      if (other.CurrentWaitCycles != 0UL) {
        CurrentWaitCycles = other.CurrentWaitCycles;
      }
      if (other.LifetimeWaitCycles != 0UL) {
        LifetimeWaitCycles = other.LifetimeWaitCycles;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumContentions = input.ReadUInt64();
            break;
          }
          case 16: {
            CurrentWaitCycles = input.ReadUInt64();
            break;
          }
          case 24: {
            LifetimeWaitCycles = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
