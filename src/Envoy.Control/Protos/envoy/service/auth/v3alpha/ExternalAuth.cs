// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/service/auth/v3alpha/external_auth.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Service.Auth.V3Alpha {

  /// <summary>Holder for reflection information generated from envoy/service/auth/v3alpha/external_auth.proto</summary>
  public static partial class ExternalAuthReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/service/auth/v3alpha/external_auth.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExternalAuthReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5lbnZveS9zZXJ2aWNlL2F1dGgvdjNhbHBoYS9leHRlcm5hbF9hdXRoLnBy",
            "b3RvEhplbnZveS5zZXJ2aWNlLmF1dGgudjNhbHBoYRohZW52b3kvYXBpL3Yz",
            "YWxwaGEvY29yZS9iYXNlLnByb3RvGhxlbnZveS90eXBlL2h0dHBfc3RhdHVz",
            "LnByb3RvGjJlbnZveS9zZXJ2aWNlL2F1dGgvdjNhbHBoYS9hdHRyaWJ1dGVf",
            "Y29udGV4dC5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJvdG8aF3ZhbGlk",
            "YXRlL3ZhbGlkYXRlLnByb3RvIlAKDENoZWNrUmVxdWVzdBJACgphdHRyaWJ1",
            "dGVzGAEgASgLMiwuZW52b3kuc2VydmljZS5hdXRoLnYzYWxwaGEuQXR0cmli",
            "dXRlQ29udGV4dCKSAQoSRGVuaWVkSHR0cFJlc3BvbnNlEjIKBnN0YXR1cxgB",
            "IAEoCzIWLmVudm95LnR5cGUuSHR0cFN0YXR1c0IKuunAAwWKAQIQARI6Cgdo",
            "ZWFkZXJzGAIgAygLMikuZW52b3kuYXBpLnYzYWxwaGEuY29yZS5IZWFkZXJW",
            "YWx1ZU9wdGlvbhIMCgRib2R5GAMgASgJIkwKDk9rSHR0cFJlc3BvbnNlEjoK",
            "B2hlYWRlcnMYAiADKAsyKS5lbnZveS5hcGkudjNhbHBoYS5jb3JlLkhlYWRl",
            "clZhbHVlT3B0aW9uItIBCg1DaGVja1Jlc3BvbnNlEiIKBnN0YXR1cxgBIAEo",
            "CzISLmdvb2dsZS5ycGMuU3RhdHVzEkkKD2RlbmllZF9yZXNwb25zZRgCIAEo",
            "CzIuLmVudm95LnNlcnZpY2UuYXV0aC52M2FscGhhLkRlbmllZEh0dHBSZXNw",
            "b25zZUgAEkEKC29rX3Jlc3BvbnNlGAMgASgLMiouZW52b3kuc2VydmljZS5h",
            "dXRoLnYzYWxwaGEuT2tIdHRwUmVzcG9uc2VIAEIPCg1odHRwX3Jlc3BvbnNl",
            "Mm0KDUF1dGhvcml6YXRpb24SXAoFQ2hlY2sSKC5lbnZveS5zZXJ2aWNlLmF1",
            "dGgudjNhbHBoYS5DaGVja1JlcXVlc3QaKS5lbnZveS5zZXJ2aWNlLmF1dGgu",
            "djNhbHBoYS5DaGVja1Jlc3BvbnNlQkIKKGlvLmVudm95cHJveHkuZW52b3ku",
            "c2VydmljZS5hdXRoLnYzYWxwaGFCEUV4dGVybmFsQXV0aFByb3RvUAGIAQFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V3Alpha.Core.BaseReflection.Descriptor, global::Envoy.Type.HttpStatusReflection.Descriptor, global::Envoy.Service.Auth.V3Alpha.AttributeContextReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V3Alpha.CheckRequest), global::Envoy.Service.Auth.V3Alpha.CheckRequest.Parser, new[]{ "Attributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V3Alpha.DeniedHttpResponse), global::Envoy.Service.Auth.V3Alpha.DeniedHttpResponse.Parser, new[]{ "Status", "Headers", "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V3Alpha.OkHttpResponse), global::Envoy.Service.Auth.V3Alpha.OkHttpResponse.Parser, new[]{ "Headers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Service.Auth.V3Alpha.CheckResponse), global::Envoy.Service.Auth.V3Alpha.CheckResponse.Parser, new[]{ "Status", "DeniedResponse", "OkResponse" }, new[]{ "HttpResponse" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CheckRequest : pb::IMessage<CheckRequest> {
    private static readonly pb::MessageParser<CheckRequest> _parser = new pb::MessageParser<CheckRequest>(() => new CheckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Service.Auth.V3Alpha.ExternalAuthReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRequest(CheckRequest other) : this() {
      attributes_ = other.attributes_ != null ? other.attributes_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckRequest Clone() {
      return new CheckRequest(this);
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 1;
    private global::Envoy.Service.Auth.V3Alpha.AttributeContext attributes_;
    /// <summary>
    /// The request attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Service.Auth.V3Alpha.AttributeContext Attributes {
      get { return attributes_; }
      set {
        attributes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attributes, other.Attributes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attributes_ != null) hash ^= Attributes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attributes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attributes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attributes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckRequest other) {
      if (other == null) {
        return;
      }
      if (other.attributes_ != null) {
        if (attributes_ == null) {
          Attributes = new global::Envoy.Service.Auth.V3Alpha.AttributeContext();
        }
        Attributes.MergeFrom(other.Attributes);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attributes_ == null) {
              Attributes = new global::Envoy.Service.Auth.V3Alpha.AttributeContext();
            }
            input.ReadMessage(Attributes);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// HTTP attributes for a denied response.
  /// </summary>
  public sealed partial class DeniedHttpResponse : pb::IMessage<DeniedHttpResponse> {
    private static readonly pb::MessageParser<DeniedHttpResponse> _parser = new pb::MessageParser<DeniedHttpResponse>(() => new DeniedHttpResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeniedHttpResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Service.Auth.V3Alpha.ExternalAuthReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeniedHttpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeniedHttpResponse(DeniedHttpResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      headers_ = other.headers_.Clone();
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeniedHttpResponse Clone() {
      return new DeniedHttpResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Envoy.Type.HttpStatus status_;
    /// <summary>
    /// This field allows the authorization service to send a HTTP response status
    /// code to the downstream client other than 403 (Forbidden).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Type.HttpStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.Core.HeaderValueOption> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V3Alpha.Core.HeaderValueOption.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValueOption> headers_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValueOption>();
    /// <summary>
    /// This field allows the authorization service to send HTTP response headers
    /// to the downstream client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValueOption> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private string body_ = "";
    /// <summary>
    /// This field allows the authorization service to send a response body data
    /// to the downstream client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeniedHttpResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeniedHttpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!headers_.Equals(other.headers_)) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= headers_.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      headers_.WriteTo(output, _repeated_headers_codec);
      if (Body.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += headers_.CalculateSize(_repeated_headers_codec);
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeniedHttpResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Envoy.Type.HttpStatus();
        }
        Status.MergeFrom(other.Status);
      }
      headers_.Add(other.headers_);
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Envoy.Type.HttpStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
          case 26: {
            Body = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// HTTP attributes for an ok response.
  /// </summary>
  public sealed partial class OkHttpResponse : pb::IMessage<OkHttpResponse> {
    private static readonly pb::MessageParser<OkHttpResponse> _parser = new pb::MessageParser<OkHttpResponse>(() => new OkHttpResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OkHttpResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Service.Auth.V3Alpha.ExternalAuthReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkHttpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkHttpResponse(OkHttpResponse other) : this() {
      headers_ = other.headers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OkHttpResponse Clone() {
      return new OkHttpResponse(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Envoy.Api.V3Alpha.Core.HeaderValueOption> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V3Alpha.Core.HeaderValueOption.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValueOption> headers_ = new pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValueOption>();
    /// <summary>
    /// HTTP entity headers in addition to the original request headers. This allows the authorization
    /// service to append, to add or to override headers from the original request before
    /// dispatching it to the upstream. By setting `append` field to `true` in the `HeaderValueOption`,
    /// the filter will append the correspondent header value to the matched request header. Note that
    /// by Leaving `append` as false, the filter will either add a new header, or override an existing
    /// one if there is a match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Api.V3Alpha.Core.HeaderValueOption> Headers {
      get { return headers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OkHttpResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OkHttpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OkHttpResponse other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Intended for gRPC and Network Authorization servers `only`.
  /// </summary>
  public sealed partial class CheckResponse : pb::IMessage<CheckResponse> {
    private static readonly pb::MessageParser<CheckResponse> _parser = new pb::MessageParser<CheckResponse>(() => new CheckResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Service.Auth.V3Alpha.ExternalAuthReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponse(CheckResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      switch (other.HttpResponseCase) {
        case HttpResponseOneofCase.DeniedResponse:
          DeniedResponse = other.DeniedResponse.Clone();
          break;
        case HttpResponseOneofCase.OkResponse:
          OkResponse = other.OkResponse.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckResponse Clone() {
      return new CheckResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Google.Rpc.Status status_;
    /// <summary>
    /// Status `OK` allows the request. Any other status indicates the request should be denied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "denied_response" field.</summary>
    public const int DeniedResponseFieldNumber = 2;
    /// <summary>
    /// Supplies http attributes for a denied response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Service.Auth.V3Alpha.DeniedHttpResponse DeniedResponse {
      get { return httpResponseCase_ == HttpResponseOneofCase.DeniedResponse ? (global::Envoy.Service.Auth.V3Alpha.DeniedHttpResponse) httpResponse_ : null; }
      set {
        httpResponse_ = value;
        httpResponseCase_ = value == null ? HttpResponseOneofCase.None : HttpResponseOneofCase.DeniedResponse;
      }
    }

    /// <summary>Field number for the "ok_response" field.</summary>
    public const int OkResponseFieldNumber = 3;
    /// <summary>
    /// Supplies http attributes for an ok response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Service.Auth.V3Alpha.OkHttpResponse OkResponse {
      get { return httpResponseCase_ == HttpResponseOneofCase.OkResponse ? (global::Envoy.Service.Auth.V3Alpha.OkHttpResponse) httpResponse_ : null; }
      set {
        httpResponse_ = value;
        httpResponseCase_ = value == null ? HttpResponseOneofCase.None : HttpResponseOneofCase.OkResponse;
      }
    }

    private object httpResponse_;
    /// <summary>Enum of possible cases for the "http_response" oneof.</summary>
    public enum HttpResponseOneofCase {
      None = 0,
      DeniedResponse = 2,
      OkResponse = 3,
    }
    private HttpResponseOneofCase httpResponseCase_ = HttpResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpResponseOneofCase HttpResponseCase {
      get { return httpResponseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHttpResponse() {
      httpResponseCase_ = HttpResponseOneofCase.None;
      httpResponse_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(DeniedResponse, other.DeniedResponse)) return false;
      if (!object.Equals(OkResponse, other.OkResponse)) return false;
      if (HttpResponseCase != other.HttpResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (httpResponseCase_ == HttpResponseOneofCase.DeniedResponse) hash ^= DeniedResponse.GetHashCode();
      if (httpResponseCase_ == HttpResponseOneofCase.OkResponse) hash ^= OkResponse.GetHashCode();
      hash ^= (int) httpResponseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (httpResponseCase_ == HttpResponseOneofCase.DeniedResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(DeniedResponse);
      }
      if (httpResponseCase_ == HttpResponseOneofCase.OkResponse) {
        output.WriteRawTag(26);
        output.WriteMessage(OkResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (httpResponseCase_ == HttpResponseOneofCase.DeniedResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeniedResponse);
      }
      if (httpResponseCase_ == HttpResponseOneofCase.OkResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OkResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Google.Rpc.Status();
        }
        Status.MergeFrom(other.Status);
      }
      switch (other.HttpResponseCase) {
        case HttpResponseOneofCase.DeniedResponse:
          if (DeniedResponse == null) {
            DeniedResponse = new global::Envoy.Service.Auth.V3Alpha.DeniedHttpResponse();
          }
          DeniedResponse.MergeFrom(other.DeniedResponse);
          break;
        case HttpResponseOneofCase.OkResponse:
          if (OkResponse == null) {
            OkResponse = new global::Envoy.Service.Auth.V3Alpha.OkHttpResponse();
          }
          OkResponse.MergeFrom(other.OkResponse);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Google.Rpc.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            global::Envoy.Service.Auth.V3Alpha.DeniedHttpResponse subBuilder = new global::Envoy.Service.Auth.V3Alpha.DeniedHttpResponse();
            if (httpResponseCase_ == HttpResponseOneofCase.DeniedResponse) {
              subBuilder.MergeFrom(DeniedResponse);
            }
            input.ReadMessage(subBuilder);
            DeniedResponse = subBuilder;
            break;
          }
          case 26: {
            global::Envoy.Service.Auth.V3Alpha.OkHttpResponse subBuilder = new global::Envoy.Service.Auth.V3Alpha.OkHttpResponse();
            if (httpResponseCase_ == HttpResponseOneofCase.OkResponse) {
              subBuilder.MergeFrom(OkResponse);
            }
            input.ReadMessage(subBuilder);
            OkResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
