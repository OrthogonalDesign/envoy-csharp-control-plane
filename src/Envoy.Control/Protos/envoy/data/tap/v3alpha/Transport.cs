// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/data/tap/v3alpha/transport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Data.Tap.V3Alpha {

  /// <summary>Holder for reflection information generated from envoy/data/tap/v3alpha/transport.proto</summary>
  public static partial class TransportReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/data/tap/v3alpha/transport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TransportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZlbnZveS9kYXRhL3RhcC92M2FscGhhL3RyYW5zcG9ydC5wcm90bxIWZW52",
            "b3kuZGF0YS50YXAudjNhbHBoYRokZW52b3kvYXBpL3YzYWxwaGEvY29yZS9h",
            "ZGRyZXNzLnByb3RvGiNlbnZveS9kYXRhL3RhcC92M2FscGhhL2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byJ9CgpDb25u",
            "ZWN0aW9uEjYKDWxvY2FsX2FkZHJlc3MYAiABKAsyHy5lbnZveS5hcGkudjNh",
            "bHBoYS5jb3JlLkFkZHJlc3MSNwoOcmVtb3RlX2FkZHJlc3MYAyABKAsyHy5l",
            "bnZveS5hcGkudjNhbHBoYS5jb3JlLkFkZHJlc3MiiQMKC1NvY2tldEV2ZW50",
            "Ei0KCXRpbWVzdGFtcBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASOAoEcmVhZBgCIAEoCzIoLmVudm95LmRhdGEudGFwLnYzYWxwaGEuU29j",
            "a2V0RXZlbnQuUmVhZEgAEjoKBXdyaXRlGAMgASgLMikuZW52b3kuZGF0YS50",
            "YXAudjNhbHBoYS5Tb2NrZXRFdmVudC5Xcml0ZUgAEjwKBmNsb3NlZBgEIAEo",
            "CzIqLmVudm95LmRhdGEudGFwLnYzYWxwaGEuU29ja2V0RXZlbnQuQ2xvc2Vk",
            "SAAaMgoEUmVhZBIqCgRkYXRhGAEgASgLMhwuZW52b3kuZGF0YS50YXAudjNh",
            "bHBoYS5Cb2R5GkcKBVdyaXRlEioKBGRhdGEYASABKAsyHC5lbnZveS5kYXRh",
            "LnRhcC52M2FscGhhLkJvZHkSEgoKZW5kX3N0cmVhbRgCIAEoCBoICgZDbG9z",
            "ZWRCEAoOZXZlbnRfc2VsZWN0b3IixQEKE1NvY2tldEJ1ZmZlcmVkVHJhY2US",
            "EAoIdHJhY2VfaWQYASABKAQSNgoKY29ubmVjdGlvbhgCIAEoCzIiLmVudm95",
            "LmRhdGEudGFwLnYzYWxwaGEuQ29ubmVjdGlvbhIzCgZldmVudHMYAyADKAsy",
            "Iy5lbnZveS5kYXRhLnRhcC52M2FscGhhLlNvY2tldEV2ZW50EhYKDnJlYWRf",
            "dHJ1bmNhdGVkGAQgASgIEhcKD3dyaXRlX3RydW5jYXRlZBgFIAEoCCKvAQoa",
            "U29ja2V0U3RyZWFtZWRUcmFjZVNlZ21lbnQSEAoIdHJhY2VfaWQYASABKAQS",
            "OAoKY29ubmVjdGlvbhgCIAEoCzIiLmVudm95LmRhdGEudGFwLnYzYWxwaGEu",
            "Q29ubmVjdGlvbkgAEjQKBWV2ZW50GAMgASgLMiMuZW52b3kuZGF0YS50YXAu",
            "djNhbHBoYS5Tb2NrZXRFdmVudEgAQg8KDW1lc3NhZ2VfcGllY2VCOAokaW8u",
            "ZW52b3lwcm94eS5lbnZveS5kYXRhLnRhcC52M2FscGhhQg5UcmFuc3BvcnRQ",
            "cm90b1ABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V3Alpha.Core.AddressReflection.Descriptor, global::Envoy.Data.Tap.V3Alpha.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.Connection), global::Envoy.Data.Tap.V3Alpha.Connection.Parser, new[]{ "LocalAddress", "RemoteAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.SocketEvent), global::Envoy.Data.Tap.V3Alpha.SocketEvent.Parser, new[]{ "Timestamp", "Read", "Write", "Closed" }, new[]{ "EventSelector" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Read), global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Read.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Write), global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Write.Parser, new[]{ "Data", "EndStream" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Closed), global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Closed.Parser, null, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.SocketBufferedTrace), global::Envoy.Data.Tap.V3Alpha.SocketBufferedTrace.Parser, new[]{ "TraceId", "Connection", "Events", "ReadTruncated", "WriteTruncated" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.SocketStreamedTraceSegment), global::Envoy.Data.Tap.V3Alpha.SocketStreamedTraceSegment.Parser, new[]{ "TraceId", "Connection", "Event" }, new[]{ "MessagePiece" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Connection properties.
  /// </summary>
  public sealed partial class Connection : pb::IMessage<Connection> {
    private static readonly pb::MessageParser<Connection> _parser = new pb::MessageParser<Connection>(() => new Connection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Tap.V3Alpha.TransportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connection(Connection other) : this() {
      localAddress_ = other.localAddress_ != null ? other.localAddress_.Clone() : null;
      remoteAddress_ = other.remoteAddress_ != null ? other.remoteAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connection Clone() {
      return new Connection(this);
    }

    /// <summary>Field number for the "local_address" field.</summary>
    public const int LocalAddressFieldNumber = 2;
    private global::Envoy.Api.V3Alpha.Core.Address localAddress_;
    /// <summary>
    /// Local address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.Address LocalAddress {
      get { return localAddress_; }
      set {
        localAddress_ = value;
      }
    }

    /// <summary>Field number for the "remote_address" field.</summary>
    public const int RemoteAddressFieldNumber = 3;
    private global::Envoy.Api.V3Alpha.Core.Address remoteAddress_;
    /// <summary>
    /// Remote address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V3Alpha.Core.Address RemoteAddress {
      get { return remoteAddress_; }
      set {
        remoteAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LocalAddress, other.LocalAddress)) return false;
      if (!object.Equals(RemoteAddress, other.RemoteAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (localAddress_ != null) hash ^= LocalAddress.GetHashCode();
      if (remoteAddress_ != null) hash ^= RemoteAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (localAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocalAddress);
      }
      if (remoteAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RemoteAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (localAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalAddress);
      }
      if (remoteAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connection other) {
      if (other == null) {
        return;
      }
      if (other.localAddress_ != null) {
        if (localAddress_ == null) {
          LocalAddress = new global::Envoy.Api.V3Alpha.Core.Address();
        }
        LocalAddress.MergeFrom(other.LocalAddress);
      }
      if (other.remoteAddress_ != null) {
        if (remoteAddress_ == null) {
          RemoteAddress = new global::Envoy.Api.V3Alpha.Core.Address();
        }
        RemoteAddress.MergeFrom(other.RemoteAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (localAddress_ == null) {
              LocalAddress = new global::Envoy.Api.V3Alpha.Core.Address();
            }
            input.ReadMessage(LocalAddress);
            break;
          }
          case 26: {
            if (remoteAddress_ == null) {
              RemoteAddress = new global::Envoy.Api.V3Alpha.Core.Address();
            }
            input.ReadMessage(RemoteAddress);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Event in a socket trace.
  /// </summary>
  public sealed partial class SocketEvent : pb::IMessage<SocketEvent> {
    private static readonly pb::MessageParser<SocketEvent> _parser = new pb::MessageParser<SocketEvent>(() => new SocketEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocketEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Tap.V3Alpha.TransportReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketEvent(SocketEvent other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      switch (other.EventSelectorCase) {
        case EventSelectorOneofCase.Read:
          Read = other.Read.Clone();
          break;
        case EventSelectorOneofCase.Write:
          Write = other.Write.Clone();
          break;
        case EventSelectorOneofCase.Closed:
          Closed = other.Closed.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketEvent Clone() {
      return new SocketEvent(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Timestamp for event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "read" field.</summary>
    public const int ReadFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Read Read {
      get { return eventSelectorCase_ == EventSelectorOneofCase.Read ? (global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Read) eventSelector_ : null; }
      set {
        eventSelector_ = value;
        eventSelectorCase_ = value == null ? EventSelectorOneofCase.None : EventSelectorOneofCase.Read;
      }
    }

    /// <summary>Field number for the "write" field.</summary>
    public const int WriteFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Write Write {
      get { return eventSelectorCase_ == EventSelectorOneofCase.Write ? (global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Write) eventSelector_ : null; }
      set {
        eventSelector_ = value;
        eventSelectorCase_ = value == null ? EventSelectorOneofCase.None : EventSelectorOneofCase.Write;
      }
    }

    /// <summary>Field number for the "closed" field.</summary>
    public const int ClosedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Closed Closed {
      get { return eventSelectorCase_ == EventSelectorOneofCase.Closed ? (global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Closed) eventSelector_ : null; }
      set {
        eventSelector_ = value;
        eventSelectorCase_ = value == null ? EventSelectorOneofCase.None : EventSelectorOneofCase.Closed;
      }
    }

    private object eventSelector_;
    /// <summary>Enum of possible cases for the "event_selector" oneof.</summary>
    public enum EventSelectorOneofCase {
      None = 0,
      Read = 2,
      Write = 3,
      Closed = 4,
    }
    private EventSelectorOneofCase eventSelectorCase_ = EventSelectorOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSelectorOneofCase EventSelectorCase {
      get { return eventSelectorCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventSelector() {
      eventSelectorCase_ = EventSelectorOneofCase.None;
      eventSelector_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocketEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocketEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Read, other.Read)) return false;
      if (!object.Equals(Write, other.Write)) return false;
      if (!object.Equals(Closed, other.Closed)) return false;
      if (EventSelectorCase != other.EventSelectorCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (eventSelectorCase_ == EventSelectorOneofCase.Read) hash ^= Read.GetHashCode();
      if (eventSelectorCase_ == EventSelectorOneofCase.Write) hash ^= Write.GetHashCode();
      if (eventSelectorCase_ == EventSelectorOneofCase.Closed) hash ^= Closed.GetHashCode();
      hash ^= (int) eventSelectorCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (eventSelectorCase_ == EventSelectorOneofCase.Read) {
        output.WriteRawTag(18);
        output.WriteMessage(Read);
      }
      if (eventSelectorCase_ == EventSelectorOneofCase.Write) {
        output.WriteRawTag(26);
        output.WriteMessage(Write);
      }
      if (eventSelectorCase_ == EventSelectorOneofCase.Closed) {
        output.WriteRawTag(34);
        output.WriteMessage(Closed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (eventSelectorCase_ == EventSelectorOneofCase.Read) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Read);
      }
      if (eventSelectorCase_ == EventSelectorOneofCase.Write) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Write);
      }
      if (eventSelectorCase_ == EventSelectorOneofCase.Closed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Closed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocketEvent other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      switch (other.EventSelectorCase) {
        case EventSelectorOneofCase.Read:
          if (Read == null) {
            Read = new global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Read();
          }
          Read.MergeFrom(other.Read);
          break;
        case EventSelectorOneofCase.Write:
          if (Write == null) {
            Write = new global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Write();
          }
          Write.MergeFrom(other.Write);
          break;
        case EventSelectorOneofCase.Closed:
          if (Closed == null) {
            Closed = new global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Closed();
          }
          Closed.MergeFrom(other.Closed);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Read subBuilder = new global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Read();
            if (eventSelectorCase_ == EventSelectorOneofCase.Read) {
              subBuilder.MergeFrom(Read);
            }
            input.ReadMessage(subBuilder);
            Read = subBuilder;
            break;
          }
          case 26: {
            global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Write subBuilder = new global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Write();
            if (eventSelectorCase_ == EventSelectorOneofCase.Write) {
              subBuilder.MergeFrom(Write);
            }
            input.ReadMessage(subBuilder);
            Write = subBuilder;
            break;
          }
          case 34: {
            global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Closed subBuilder = new global::Envoy.Data.Tap.V3Alpha.SocketEvent.Types.Closed();
            if (eventSelectorCase_ == EventSelectorOneofCase.Closed) {
              subBuilder.MergeFrom(Closed);
            }
            input.ReadMessage(subBuilder);
            Closed = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SocketEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Data read by Envoy from the transport socket.
      /// </summary>
      public sealed partial class Read : pb::IMessage<Read> {
        private static readonly pb::MessageParser<Read> _parser = new pb::MessageParser<Read>(() => new Read());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Read> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Data.Tap.V3Alpha.SocketEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read(Read other) : this() {
          data_ = other.data_ != null ? other.data_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read Clone() {
          return new Read(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private global::Envoy.Data.Tap.V3Alpha.Body data_;
        /// <summary>
        /// Binary data read.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Data.Tap.V3Alpha.Body Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Read);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Read other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Data, other.Data)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (data_ != null) hash ^= Data.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (data_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Data);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Read other) {
          if (other == null) {
            return;
          }
          if (other.data_ != null) {
            if (data_ == null) {
              Data = new global::Envoy.Data.Tap.V3Alpha.Body();
            }
            Data.MergeFrom(other.Data);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (data_ == null) {
                  Data = new global::Envoy.Data.Tap.V3Alpha.Body();
                }
                input.ReadMessage(Data);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Data written by Envoy to the transport socket.
      /// </summary>
      public sealed partial class Write : pb::IMessage<Write> {
        private static readonly pb::MessageParser<Write> _parser = new pb::MessageParser<Write>(() => new Write());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Write> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Data.Tap.V3Alpha.SocketEvent.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Write() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Write(Write other) : this() {
          data_ = other.data_ != null ? other.data_.Clone() : null;
          endStream_ = other.endStream_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Write Clone() {
          return new Write(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private global::Envoy.Data.Tap.V3Alpha.Body data_;
        /// <summary>
        /// Binary data written.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Envoy.Data.Tap.V3Alpha.Body Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        /// <summary>Field number for the "end_stream" field.</summary>
        public const int EndStreamFieldNumber = 2;
        private bool endStream_;
        /// <summary>
        /// Stream was half closed after this write.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool EndStream {
          get { return endStream_; }
          set {
            endStream_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Write);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Write other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Data, other.Data)) return false;
          if (EndStream != other.EndStream) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (data_ != null) hash ^= Data.GetHashCode();
          if (EndStream != false) hash ^= EndStream.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (data_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Data);
          }
          if (EndStream != false) {
            output.WriteRawTag(16);
            output.WriteBool(EndStream);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          if (EndStream != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Write other) {
          if (other == null) {
            return;
          }
          if (other.data_ != null) {
            if (data_ == null) {
              Data = new global::Envoy.Data.Tap.V3Alpha.Body();
            }
            Data.MergeFrom(other.Data);
          }
          if (other.EndStream != false) {
            EndStream = other.EndStream;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (data_ == null) {
                  Data = new global::Envoy.Data.Tap.V3Alpha.Body();
                }
                input.ReadMessage(Data);
                break;
              }
              case 16: {
                EndStream = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// The connection was closed.
      /// </summary>
      public sealed partial class Closed : pb::IMessage<Closed> {
        private static readonly pb::MessageParser<Closed> _parser = new pb::MessageParser<Closed>(() => new Closed());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Closed> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Data.Tap.V3Alpha.SocketEvent.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Closed() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Closed(Closed other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Closed Clone() {
          return new Closed(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Closed);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Closed other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Closed other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Sequence of read/write events that constitute a buffered trace on a socket.
  /// </summary>
  public sealed partial class SocketBufferedTrace : pb::IMessage<SocketBufferedTrace> {
    private static readonly pb::MessageParser<SocketBufferedTrace> _parser = new pb::MessageParser<SocketBufferedTrace>(() => new SocketBufferedTrace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocketBufferedTrace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Tap.V3Alpha.TransportReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketBufferedTrace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketBufferedTrace(SocketBufferedTrace other) : this() {
      traceId_ = other.traceId_;
      connection_ = other.connection_ != null ? other.connection_.Clone() : null;
      events_ = other.events_.Clone();
      readTruncated_ = other.readTruncated_;
      writeTruncated_ = other.writeTruncated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketBufferedTrace Clone() {
      return new SocketBufferedTrace(this);
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private ulong traceId_;
    /// <summary>
    /// Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
    /// for long term stable uniqueness. Matches connection IDs used in Envoy logs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TraceId {
      get { return traceId_; }
      set {
        traceId_ = value;
      }
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 2;
    private global::Envoy.Data.Tap.V3Alpha.Connection connection_;
    /// <summary>
    /// Connection properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.Connection Connection {
      get { return connection_; }
      set {
        connection_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Data.Tap.V3Alpha.SocketEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Data.Tap.V3Alpha.SocketEvent.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Data.Tap.V3Alpha.SocketEvent> events_ = new pbc::RepeatedField<global::Envoy.Data.Tap.V3Alpha.SocketEvent>();
    /// <summary>
    /// Sequence of observed events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Data.Tap.V3Alpha.SocketEvent> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "read_truncated" field.</summary>
    public const int ReadTruncatedFieldNumber = 4;
    private bool readTruncated_;
    /// <summary>
    /// Set to true if read events were truncated due to the :ref:`max_buffered_rx_bytes
    /// &lt;envoy_api_field_service.tap.v3alpha.OutputConfig.max_buffered_rx_bytes>` setting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadTruncated {
      get { return readTruncated_; }
      set {
        readTruncated_ = value;
      }
    }

    /// <summary>Field number for the "write_truncated" field.</summary>
    public const int WriteTruncatedFieldNumber = 5;
    private bool writeTruncated_;
    /// <summary>
    /// Set to true if write events were truncated due to the :ref:`max_buffered_tx_bytes
    /// &lt;envoy_api_field_service.tap.v3alpha.OutputConfig.max_buffered_tx_bytes>` setting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WriteTruncated {
      get { return writeTruncated_; }
      set {
        writeTruncated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocketBufferedTrace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocketBufferedTrace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (!object.Equals(Connection, other.Connection)) return false;
      if(!events_.Equals(other.events_)) return false;
      if (ReadTruncated != other.ReadTruncated) return false;
      if (WriteTruncated != other.WriteTruncated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId != 0UL) hash ^= TraceId.GetHashCode();
      if (connection_ != null) hash ^= Connection.GetHashCode();
      hash ^= events_.GetHashCode();
      if (ReadTruncated != false) hash ^= ReadTruncated.GetHashCode();
      if (WriteTruncated != false) hash ^= WriteTruncated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TraceId);
      }
      if (connection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Connection);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (ReadTruncated != false) {
        output.WriteRawTag(32);
        output.WriteBool(ReadTruncated);
      }
      if (WriteTruncated != false) {
        output.WriteRawTag(40);
        output.WriteBool(WriteTruncated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraceId);
      }
      if (connection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connection);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (ReadTruncated != false) {
        size += 1 + 1;
      }
      if (WriteTruncated != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocketBufferedTrace other) {
      if (other == null) {
        return;
      }
      if (other.TraceId != 0UL) {
        TraceId = other.TraceId;
      }
      if (other.connection_ != null) {
        if (connection_ == null) {
          Connection = new global::Envoy.Data.Tap.V3Alpha.Connection();
        }
        Connection.MergeFrom(other.Connection);
      }
      events_.Add(other.events_);
      if (other.ReadTruncated != false) {
        ReadTruncated = other.ReadTruncated;
      }
      if (other.WriteTruncated != false) {
        WriteTruncated = other.WriteTruncated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TraceId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (connection_ == null) {
              Connection = new global::Envoy.Data.Tap.V3Alpha.Connection();
            }
            input.ReadMessage(Connection);
            break;
          }
          case 26: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 32: {
            ReadTruncated = input.ReadBool();
            break;
          }
          case 40: {
            WriteTruncated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A streamed socket trace segment. Multiple segments make up a full trace.
  /// </summary>
  public sealed partial class SocketStreamedTraceSegment : pb::IMessage<SocketStreamedTraceSegment> {
    private static readonly pb::MessageParser<SocketStreamedTraceSegment> _parser = new pb::MessageParser<SocketStreamedTraceSegment>(() => new SocketStreamedTraceSegment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocketStreamedTraceSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Tap.V3Alpha.TransportReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketStreamedTraceSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketStreamedTraceSegment(SocketStreamedTraceSegment other) : this() {
      traceId_ = other.traceId_;
      switch (other.MessagePieceCase) {
        case MessagePieceOneofCase.Connection:
          Connection = other.Connection.Clone();
          break;
        case MessagePieceOneofCase.Event:
          Event = other.Event.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocketStreamedTraceSegment Clone() {
      return new SocketStreamedTraceSegment(this);
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private ulong traceId_;
    /// <summary>
    /// Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
    /// for long term stable uniqueness. Matches connection IDs used in Envoy logs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TraceId {
      get { return traceId_; }
      set {
        traceId_ = value;
      }
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 2;
    /// <summary>
    /// Connection properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.Connection Connection {
      get { return messagePieceCase_ == MessagePieceOneofCase.Connection ? (global::Envoy.Data.Tap.V3Alpha.Connection) messagePiece_ : null; }
      set {
        messagePiece_ = value;
        messagePieceCase_ = value == null ? MessagePieceOneofCase.None : MessagePieceOneofCase.Connection;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    /// <summary>
    /// Socket event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.SocketEvent Event {
      get { return messagePieceCase_ == MessagePieceOneofCase.Event ? (global::Envoy.Data.Tap.V3Alpha.SocketEvent) messagePiece_ : null; }
      set {
        messagePiece_ = value;
        messagePieceCase_ = value == null ? MessagePieceOneofCase.None : MessagePieceOneofCase.Event;
      }
    }

    private object messagePiece_;
    /// <summary>Enum of possible cases for the "message_piece" oneof.</summary>
    public enum MessagePieceOneofCase {
      None = 0,
      Connection = 2,
      Event = 3,
    }
    private MessagePieceOneofCase messagePieceCase_ = MessagePieceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessagePieceOneofCase MessagePieceCase {
      get { return messagePieceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessagePiece() {
      messagePieceCase_ = MessagePieceOneofCase.None;
      messagePiece_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocketStreamedTraceSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocketStreamedTraceSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (!object.Equals(Connection, other.Connection)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (MessagePieceCase != other.MessagePieceCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId != 0UL) hash ^= TraceId.GetHashCode();
      if (messagePieceCase_ == MessagePieceOneofCase.Connection) hash ^= Connection.GetHashCode();
      if (messagePieceCase_ == MessagePieceOneofCase.Event) hash ^= Event.GetHashCode();
      hash ^= (int) messagePieceCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TraceId);
      }
      if (messagePieceCase_ == MessagePieceOneofCase.Connection) {
        output.WriteRawTag(18);
        output.WriteMessage(Connection);
      }
      if (messagePieceCase_ == MessagePieceOneofCase.Event) {
        output.WriteRawTag(26);
        output.WriteMessage(Event);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraceId);
      }
      if (messagePieceCase_ == MessagePieceOneofCase.Connection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connection);
      }
      if (messagePieceCase_ == MessagePieceOneofCase.Event) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocketStreamedTraceSegment other) {
      if (other == null) {
        return;
      }
      if (other.TraceId != 0UL) {
        TraceId = other.TraceId;
      }
      switch (other.MessagePieceCase) {
        case MessagePieceOneofCase.Connection:
          if (Connection == null) {
            Connection = new global::Envoy.Data.Tap.V3Alpha.Connection();
          }
          Connection.MergeFrom(other.Connection);
          break;
        case MessagePieceOneofCase.Event:
          if (Event == null) {
            Event = new global::Envoy.Data.Tap.V3Alpha.SocketEvent();
          }
          Event.MergeFrom(other.Event);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TraceId = input.ReadUInt64();
            break;
          }
          case 18: {
            global::Envoy.Data.Tap.V3Alpha.Connection subBuilder = new global::Envoy.Data.Tap.V3Alpha.Connection();
            if (messagePieceCase_ == MessagePieceOneofCase.Connection) {
              subBuilder.MergeFrom(Connection);
            }
            input.ReadMessage(subBuilder);
            Connection = subBuilder;
            break;
          }
          case 26: {
            global::Envoy.Data.Tap.V3Alpha.SocketEvent subBuilder = new global::Envoy.Data.Tap.V3Alpha.SocketEvent();
            if (messagePieceCase_ == MessagePieceOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
