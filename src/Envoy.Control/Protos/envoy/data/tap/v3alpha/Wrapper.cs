// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: envoy/data/tap/v3alpha/wrapper.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Data.Tap.V3Alpha {

  /// <summary>Holder for reflection information generated from envoy/data/tap/v3alpha/wrapper.proto</summary>
  public static partial class WrapperReflection {

    #region Descriptor
    /// <summary>File descriptor for envoy/data/tap/v3alpha/wrapper.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WrapperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRlbnZveS9kYXRhL3RhcC92M2FscGhhL3dyYXBwZXIucHJvdG8SFmVudm95",
            "LmRhdGEudGFwLnYzYWxwaGEaIWVudm95L2RhdGEvdGFwL3YzYWxwaGEvaHR0",
            "cC5wcm90bxomZW52b3kvZGF0YS90YXAvdjNhbHBoYS90cmFuc3BvcnQucHJv",
            "dG8aF3ZhbGlkYXRlL3ZhbGlkYXRlLnByb3RvIuwCCgxUcmFjZVdyYXBwZXIS",
            "SAoTaHR0cF9idWZmZXJlZF90cmFjZRgBIAEoCzIpLmVudm95LmRhdGEudGFw",
            "LnYzYWxwaGEuSHR0cEJ1ZmZlcmVkVHJhY2VIABJXChtodHRwX3N0cmVhbWVk",
            "X3RyYWNlX3NlZ21lbnQYAiABKAsyMC5lbnZveS5kYXRhLnRhcC52M2FscGhh",
            "Lkh0dHBTdHJlYW1lZFRyYWNlU2VnbWVudEgAEkwKFXNvY2tldF9idWZmZXJl",
            "ZF90cmFjZRgDIAEoCzIrLmVudm95LmRhdGEudGFwLnYzYWxwaGEuU29ja2V0",
            "QnVmZmVyZWRUcmFjZUgAElsKHXNvY2tldF9zdHJlYW1lZF90cmFjZV9zZWdt",
            "ZW50GAQgASgLMjIuZW52b3kuZGF0YS50YXAudjNhbHBoYS5Tb2NrZXRTdHJl",
            "YW1lZFRyYWNlU2VnbWVudEgAQg4KBXRyYWNlEgW46cADAUI2CiRpby5lbnZv",
            "eXByb3h5LmVudm95LmRhdGEudGFwLnYzYWxwaGFCDFdyYXBwZXJQcm90b1AB",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Data.Tap.V3Alpha.HttpReflection.Descriptor, global::Envoy.Data.Tap.V3Alpha.TransportReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Data.Tap.V3Alpha.TraceWrapper), global::Envoy.Data.Tap.V3Alpha.TraceWrapper.Parser, new[]{ "HttpBufferedTrace", "HttpStreamedTraceSegment", "SocketBufferedTrace", "SocketStreamedTraceSegment" }, new[]{ "Trace" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Wrapper for all fully buffered and streamed tap traces that Envoy emits. This is required for
  /// sending traces over gRPC APIs or more easily persisting binary messages to files.
  /// </summary>
  public sealed partial class TraceWrapper : pb::IMessage<TraceWrapper> {
    private static readonly pb::MessageParser<TraceWrapper> _parser = new pb::MessageParser<TraceWrapper>(() => new TraceWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Data.Tap.V3Alpha.WrapperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceWrapper(TraceWrapper other) : this() {
      switch (other.TraceCase) {
        case TraceOneofCase.HttpBufferedTrace:
          HttpBufferedTrace = other.HttpBufferedTrace.Clone();
          break;
        case TraceOneofCase.HttpStreamedTraceSegment:
          HttpStreamedTraceSegment = other.HttpStreamedTraceSegment.Clone();
          break;
        case TraceOneofCase.SocketBufferedTrace:
          SocketBufferedTrace = other.SocketBufferedTrace.Clone();
          break;
        case TraceOneofCase.SocketStreamedTraceSegment:
          SocketStreamedTraceSegment = other.SocketStreamedTraceSegment.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceWrapper Clone() {
      return new TraceWrapper(this);
    }

    /// <summary>Field number for the "http_buffered_trace" field.</summary>
    public const int HttpBufferedTraceFieldNumber = 1;
    /// <summary>
    /// An HTTP buffered tap trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.HttpBufferedTrace HttpBufferedTrace {
      get { return traceCase_ == TraceOneofCase.HttpBufferedTrace ? (global::Envoy.Data.Tap.V3Alpha.HttpBufferedTrace) trace_ : null; }
      set {
        trace_ = value;
        traceCase_ = value == null ? TraceOneofCase.None : TraceOneofCase.HttpBufferedTrace;
      }
    }

    /// <summary>Field number for the "http_streamed_trace_segment" field.</summary>
    public const int HttpStreamedTraceSegmentFieldNumber = 2;
    /// <summary>
    /// An HTTP streamed tap trace segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.HttpStreamedTraceSegment HttpStreamedTraceSegment {
      get { return traceCase_ == TraceOneofCase.HttpStreamedTraceSegment ? (global::Envoy.Data.Tap.V3Alpha.HttpStreamedTraceSegment) trace_ : null; }
      set {
        trace_ = value;
        traceCase_ = value == null ? TraceOneofCase.None : TraceOneofCase.HttpStreamedTraceSegment;
      }
    }

    /// <summary>Field number for the "socket_buffered_trace" field.</summary>
    public const int SocketBufferedTraceFieldNumber = 3;
    /// <summary>
    /// A socket buffered tap trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.SocketBufferedTrace SocketBufferedTrace {
      get { return traceCase_ == TraceOneofCase.SocketBufferedTrace ? (global::Envoy.Data.Tap.V3Alpha.SocketBufferedTrace) trace_ : null; }
      set {
        trace_ = value;
        traceCase_ = value == null ? TraceOneofCase.None : TraceOneofCase.SocketBufferedTrace;
      }
    }

    /// <summary>Field number for the "socket_streamed_trace_segment" field.</summary>
    public const int SocketStreamedTraceSegmentFieldNumber = 4;
    /// <summary>
    /// A socket streamed tap trace segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Data.Tap.V3Alpha.SocketStreamedTraceSegment SocketStreamedTraceSegment {
      get { return traceCase_ == TraceOneofCase.SocketStreamedTraceSegment ? (global::Envoy.Data.Tap.V3Alpha.SocketStreamedTraceSegment) trace_ : null; }
      set {
        trace_ = value;
        traceCase_ = value == null ? TraceOneofCase.None : TraceOneofCase.SocketStreamedTraceSegment;
      }
    }

    private object trace_;
    /// <summary>Enum of possible cases for the "trace" oneof.</summary>
    public enum TraceOneofCase {
      None = 0,
      HttpBufferedTrace = 1,
      HttpStreamedTraceSegment = 2,
      SocketBufferedTrace = 3,
      SocketStreamedTraceSegment = 4,
    }
    private TraceOneofCase traceCase_ = TraceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceOneofCase TraceCase {
      get { return traceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrace() {
      traceCase_ = TraceOneofCase.None;
      trace_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HttpBufferedTrace, other.HttpBufferedTrace)) return false;
      if (!object.Equals(HttpStreamedTraceSegment, other.HttpStreamedTraceSegment)) return false;
      if (!object.Equals(SocketBufferedTrace, other.SocketBufferedTrace)) return false;
      if (!object.Equals(SocketStreamedTraceSegment, other.SocketStreamedTraceSegment)) return false;
      if (TraceCase != other.TraceCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (traceCase_ == TraceOneofCase.HttpBufferedTrace) hash ^= HttpBufferedTrace.GetHashCode();
      if (traceCase_ == TraceOneofCase.HttpStreamedTraceSegment) hash ^= HttpStreamedTraceSegment.GetHashCode();
      if (traceCase_ == TraceOneofCase.SocketBufferedTrace) hash ^= SocketBufferedTrace.GetHashCode();
      if (traceCase_ == TraceOneofCase.SocketStreamedTraceSegment) hash ^= SocketStreamedTraceSegment.GetHashCode();
      hash ^= (int) traceCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (traceCase_ == TraceOneofCase.HttpBufferedTrace) {
        output.WriteRawTag(10);
        output.WriteMessage(HttpBufferedTrace);
      }
      if (traceCase_ == TraceOneofCase.HttpStreamedTraceSegment) {
        output.WriteRawTag(18);
        output.WriteMessage(HttpStreamedTraceSegment);
      }
      if (traceCase_ == TraceOneofCase.SocketBufferedTrace) {
        output.WriteRawTag(26);
        output.WriteMessage(SocketBufferedTrace);
      }
      if (traceCase_ == TraceOneofCase.SocketStreamedTraceSegment) {
        output.WriteRawTag(34);
        output.WriteMessage(SocketStreamedTraceSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (traceCase_ == TraceOneofCase.HttpBufferedTrace) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpBufferedTrace);
      }
      if (traceCase_ == TraceOneofCase.HttpStreamedTraceSegment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpStreamedTraceSegment);
      }
      if (traceCase_ == TraceOneofCase.SocketBufferedTrace) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocketBufferedTrace);
      }
      if (traceCase_ == TraceOneofCase.SocketStreamedTraceSegment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocketStreamedTraceSegment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceWrapper other) {
      if (other == null) {
        return;
      }
      switch (other.TraceCase) {
        case TraceOneofCase.HttpBufferedTrace:
          if (HttpBufferedTrace == null) {
            HttpBufferedTrace = new global::Envoy.Data.Tap.V3Alpha.HttpBufferedTrace();
          }
          HttpBufferedTrace.MergeFrom(other.HttpBufferedTrace);
          break;
        case TraceOneofCase.HttpStreamedTraceSegment:
          if (HttpStreamedTraceSegment == null) {
            HttpStreamedTraceSegment = new global::Envoy.Data.Tap.V3Alpha.HttpStreamedTraceSegment();
          }
          HttpStreamedTraceSegment.MergeFrom(other.HttpStreamedTraceSegment);
          break;
        case TraceOneofCase.SocketBufferedTrace:
          if (SocketBufferedTrace == null) {
            SocketBufferedTrace = new global::Envoy.Data.Tap.V3Alpha.SocketBufferedTrace();
          }
          SocketBufferedTrace.MergeFrom(other.SocketBufferedTrace);
          break;
        case TraceOneofCase.SocketStreamedTraceSegment:
          if (SocketStreamedTraceSegment == null) {
            SocketStreamedTraceSegment = new global::Envoy.Data.Tap.V3Alpha.SocketStreamedTraceSegment();
          }
          SocketStreamedTraceSegment.MergeFrom(other.SocketStreamedTraceSegment);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Envoy.Data.Tap.V3Alpha.HttpBufferedTrace subBuilder = new global::Envoy.Data.Tap.V3Alpha.HttpBufferedTrace();
            if (traceCase_ == TraceOneofCase.HttpBufferedTrace) {
              subBuilder.MergeFrom(HttpBufferedTrace);
            }
            input.ReadMessage(subBuilder);
            HttpBufferedTrace = subBuilder;
            break;
          }
          case 18: {
            global::Envoy.Data.Tap.V3Alpha.HttpStreamedTraceSegment subBuilder = new global::Envoy.Data.Tap.V3Alpha.HttpStreamedTraceSegment();
            if (traceCase_ == TraceOneofCase.HttpStreamedTraceSegment) {
              subBuilder.MergeFrom(HttpStreamedTraceSegment);
            }
            input.ReadMessage(subBuilder);
            HttpStreamedTraceSegment = subBuilder;
            break;
          }
          case 26: {
            global::Envoy.Data.Tap.V3Alpha.SocketBufferedTrace subBuilder = new global::Envoy.Data.Tap.V3Alpha.SocketBufferedTrace();
            if (traceCase_ == TraceOneofCase.SocketBufferedTrace) {
              subBuilder.MergeFrom(SocketBufferedTrace);
            }
            input.ReadMessage(subBuilder);
            SocketBufferedTrace = subBuilder;
            break;
          }
          case 34: {
            global::Envoy.Data.Tap.V3Alpha.SocketStreamedTraceSegment subBuilder = new global::Envoy.Data.Tap.V3Alpha.SocketStreamedTraceSegment();
            if (traceCase_ == TraceOneofCase.SocketStreamedTraceSegment) {
              subBuilder.MergeFrom(SocketStreamedTraceSegment);
            }
            input.ReadMessage(subBuilder);
            SocketStreamedTraceSegment = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
